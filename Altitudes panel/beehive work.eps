%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: beehive work.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Raf Wlodarczyk
%%CreationDate: 9/30/2018
%%BoundingBox: 0 0 115 365
%%HiResBoundingBox: 0 0 114.5196 364.5352
%%CropBox: 0 0 114.5196 364.5352
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2018-09-30T20:00:36-04:00</xmp:CreateDate>
         <xmp:ModifyDate>2018-09-30T20:00:36-04:00</xmp:ModifyDate>
         <xmp:MetadataDate>2018-09-30T20:00:36-04:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>80</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAABQAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9KaVpWlnS7MmzgJMEdT6&#xA;afyD2xVF/onSv+WKD/kUn9MVd+idK/5YoP8AkUn9MVYF+ktJj09LxNYtZ9WMxSLRGSxYTSGUoLVU&#xA;jiW4DMNlPL4T8TVUEYqyjUL7ytYTyQz2asYFEl08No0qQod+UrxoyptvQmtPi+zvireoXvlexlMM&#xA;lmJpFiE8q21o1wY4SSBI/pI9AxU8R1ahoDQ0VQp1TypDrEsNzLp0Nm9la3Vm0hgQSes84Z0ZqclK&#xA;xp0xVZYXug3N5eugt7i1iuHS0FtDFKsiR2kMrgMitUq7t077Yqmq/wCGnayWOG3kOoIZLPhErc41&#xA;UOZNl2SjD4jtUgdSMVQlhqflK+ngit7VeN1yNlO9o0cNxwBY+jK6BH+EFlofiUFlqoriqb6T/wAc&#xA;qy/4wRf8QGKorFXYqxO40TzJP5cuNBe0sDDOksIumuZWKiRiVl9L6uKulQwXmNx9odcVb1Hy5qn6&#xA;Xvri0T1odRZJS5v7y0EMixJA3KG3+GReEQYGoYn4TQUIVU9V8vPp9xNe2gVdNW1ijYPqN1p8dsLV&#xA;WBd2hJVo/SpufiXj1IPwqptomn21rfTi0lha3tbSz00wxOXaKS1ErlHBLFf3dxGRyYtTr4lVqLRL&#xA;pNdk1AvH6L3LzhQTy4taQ24FKUrzhJ69KYql2nabaaNqFzFquoW8du8U0OhWxkETRWIJuJwA3Hjw&#xA;5hDwqBHFGdjXFUs8pR6el3o9o15aXD2kbfU5Y9VubkzmOJ4ecNo7emnwc6j4uPxBa05BVmmk/wDH&#xA;Ksv+MEX/ABAYqisVdirsVdiqE1jTINV0i+0u4obe/t5baYEBhwmQo1VOx2bocVYkPyp0yK4R7PUL&#xA;q2hWRpDEHLtWSIQykSseYaQVZ2ruwQ9EoVUSn5cWK2vpC7eGf6zHcNcW0cUB4RJwSEKi8VRN3jp9&#xA;h/iG+KplrnlO21e7M0s3GKSOOO5tmjSRJfq7vJBy5DkFV5GLKD8XQ7Vqqs0byveaddpcnVJZiyCO&#xA;6iZeSusbyPEiNM00qIpnfZpGPShVRTFU20n/AI5Vl/xgi/4gMVRWKuxV2KuxV2KuxV2KuxV2KoXS&#xA;f+OVZf8AGCL/AIgMVRWKuxV2KpbpHmLS9WuNQt7KQvLpk7W12KbLIpIIDCoP2fo6Gh2xVT8w+bfL&#xA;XlxLaTXdSg05LuQQ27XDhA7n59h3J2HfFU2BBAINQdwRirsVdirsVY1qM+qx6RoMOmtIklzJHFKY&#xA;fSD+mLSWTZp0lQfFGv7OKqGo+Zdd0iyvX/R51AWMVvWR50SUzXDAMZeMUcKwxK3J5AdgPs98VdZe&#xA;eLi51nSdPfTvqy6lGrkyTB5FL2r3PJBEskMkQ4enzEv2u1KEqssxVDWemWFnLcS2sIie7f1bjjWj&#xA;OerU6Akmpp1O/XFVPVNJ0XUUiTVbO2vERqwrdRxygOR+yJAd/liqNAAFB0xVhC+bvMNvZaZc3VmO&#xA;E2mmeWWR1WJpS9svrzMiM0MaCV2f4dh222VX2vnnW762a4stJhKBbcKJrmSNvWuL+Wy4MogYqqLD&#xA;zY9RWnHbFU78va7d6n6y3dmLOWNUljVJDKrRSNIi1YpHR+ULVWnSm++yqP0n/jlWX/GCL/iAxVFY&#xA;qpy28MrwvIgZ4HMkJP7LlGSo/wBi7D6cVVMVS7StDttLeUWs0xt5N47WR+ccbM7SSMpI5lpHcsxd&#xA;m9qDFUq89eQtP842tha317d2kVjci7X6nL6TO6oyqGND05VBG+KsmxV2KuxV2KoXSf8AjlWX/GCL&#xA;/iAxVFYq7FXYqxTyVB56tL/WbTzK63lobkz6VqIkjPKKQAeiIkSIoIypPxA9acmpXFU08wL5mK27&#xA;aE8IZWJuEn6MNuIBoSO9cVTZeQUByC1PiIFAT3oKn9eKt4q7FXYqhdJ/45Vl/wAYIv8AiAxVFYq7&#xA;FXYqleka8upTyxfUL2z4DnE93A0Syx8igZSfsmq14PR6UJXfFUL5u8y3Og2tvNBp0+oGaVI2EK1C&#xA;guq0NP2m50TxOKp6jckVqFeQB4t1FexxVvFXYq7FULpP/HKsv+MEX/EBiqKxV2KuxVJtA84eXvME&#xA;13DpNy1xJZFRc1hmiA5FgOLSoivuh+yTiqj5q87+XfLP1VdXlZGu2pEiLzNFZRyI9iwoB8R7A0NF&#xA;U7t7iC5t4riBxJBMiyRSLuGRxVWHsQcVVMVdirsVSnSNZ0c21pYi+tzerBGGtfVT1QeAO6V5dPbF&#xA;U1ZlUVYgCoFTtuTQD78VbxV2Kpfpfl/R9LmuJrC3ED3R5T8WchiCSPhYkCnKgoOlB0AxVB+ZfJvl&#xA;zzE1q+r2/qvZsTbyB2jZedAQGUg70FCNx2IxVOI47e0tkjjCw21ugVF2VURBQD2AAxVfyXkVqOQA&#xA;JXuAa0P4Yq3irSujiqsGAJFQa7qaEfQRirHIdKv5bZ7i2dUNzp+nwwsSQQ8DyyPXb+WUUxVIL7y3&#xA;5vjsrOyTW3lv5mtmEdzMrAtABPcSIxhkNROilSwIA2pT4cVTP9Aecm067KakYtQNokOn+pLJJHG3&#xA;rSu6ylRHzcwmOP1+PIU5bn7SrIdBg1O30e1h1OUT3yJSaUb13NN+5C0BP68VYv8Al5+W1x5Qu9Qu&#xA;Jdam1UXwQBJlZeHBmNfillqTy7AYqv8AzM/LuXzpbWEUWo/o97J3bk0KXCsJVCmiyfYkUD4JF+Jd&#xA;6dcVZJrunPf+X9R02MB3u7Sa2QSmqkyRlBzJrtvvirFf8E+YNPmv5tM1KSeW5js4I3ll9KUW1obk&#xA;RW6ymO44iP10cuUYyHnX7WKrNS07zY9zHZ2epySam0plvXSaSGJIzEVgk4cJwi+qpf0xs/EoSRyB&#xA;VT3y/oeq6ZeSyTXjT291JezTwswKI8t16sBhXiOA9N35ivWnXriqbaT/AMcqy/4wRf8AEBiqCVfW&#xA;83SM3/Hhp6CI+P12ZvU/6gkxVNlZWrxINDQ03oR2xVvFUj8uT+Z5r/XP01CkNpHemPReHH47QRoQ&#xA;7UJNS5briqC8+S+eo7ayPlGFJphMTeK7RLWML8K/vQ1OTftDp13xVlOKtO6Ihd2CooqzE0AHuTiq&#xA;UyD0vNtuU2+uWE/r+/1WaL0vu+tSffiqb4qhdJ/45Vl/xgi/4gMVQcTen5suVfb61YW5g/yvq003&#xA;q/8AA/WY/vxVrQvK+l6Hc6nPp/rKNWuPrl1FJK8qeuVCM6eoWZeSqo41oAAAABiqb4qxPyT+Yll5&#xA;svNUtbbT7uzbS5fRma5TiA4ZkMb/AMkqlKsnZSprvQKqnnnz9Y+UIrGS7sbu8F9KYk+qR8wpWhoS&#xA;SBzavwL+1v0oTirJ435or0K8gDRhQiviMVQep6Ra6kIY7su9tE/N7Wo9KUj7IlFKsoO/GtD3riqF&#xA;nYN5tsVXcx2F2ZB/L6k1twr/AK3ptT5Yqm+KoXSf+OVZf8YIv+IDFUv8yObFrPXAP3enOy3x3JFl&#xA;OAszfKN1jlb/ACUOKp0CCKjcHocVdiq1IokLFEVS55OVAFT4mmKrsVdirsVSTy6wvri+10HlDfMk&#xA;Ngw6NZ23IRvtsfUlklkVh1RlxVO8VSS71G603yZJqFpbG8urSw9aC1WtZHSKqpsCdz4DFXeTtZvN&#xA;e8tW2o6hbLbz3JmV4AsiqUSZ40bhMqOBIih6MK74qpaa76DcxaPcknSpm9PRbkmpTYkWcp7cQP3L&#xA;n7S/CfjALqsgxV2KuxV2Ksf1SWXXLubQ7QldPi+DW7xWoaMob6nFTfnIjD1G/YQ7fEwKqppqdxLp&#xA;2j3dxZWhupbO3kktrCL4TK0SEpClA1ORAUbYqu0u/a+skuHtZrKRiVktblQsiMpKsDxLKwqNmVip&#xA;G4NMVdpP/HKsv+MEX/EBiqKxVC6ppttqVhNY3NfSmWnJDR0YGqSI37LowDK3YgHFUP5dv7m90iGW&#xA;7AF7EZLe84iime3doZWUfyM6Fl/ySMVTLFXYqgNdv5rDSp7i3UNdHhDaI32TcTuIYA24+EyuvL2x&#xA;VV0rTodN0+GyiZnWIHnK+7ySMS0krnu8jksx7k4qisVdiqF0n/jlWX/GCL/iAxVFYq7FUp0QU1DX&#xA;VGyi/Xio6DlZWzH72JPzxVNsVdiqU66okvNEibeN7+rqe/pWs8qf8DJGrfRiqbYq7FXYqhdJ/wCO&#xA;VZf8YIv+IDFUVirsVSjQD6lzrNyu8M9+3pN4+hBDbSfdLA4xVMlurV5mgWZGmX7UQYFhTxWtcVQm&#xA;k6vDfWWnSvSK51C0W8SAVNF4xl6Gn7JmUYqo+YCYpNKvOqWt/FzA7/WUezX7nuVOKptirsVdiqF0&#xA;n/jlWX/GCL/iAxVFYqh9Sv4dP0+5vp6mG1ieaQKKsQiliFHcmmwxVD+X7Gax0e1t7ihu+JlvCpqp&#xA;uJmMs5B8DK7EYqjFtbZZjOsSCdtmlCgOR7t1xVL4PK+gxS6fcGzjlutMtxaWV1IoaVIl40HIjrVA&#xA;a9t6dTiqtrunyahpF1aQsEuXjJtZTX93OnxwybfySKrfRiqppWoRajpttfRqUW5jWT02pyQkfEjU&#xA;6Mh+Fh2OKorFXYqhdJ/45Vl/xgi/4gMVRWKpHqbLqetW2jr8VvZmPUNSPaqPytIvm0qert2jodmx&#xA;VPMVdirsVdiqRacW0zXrnTJNrPUWe+01uwlJrdwfPmfWHdub02Q4qnuKuxVC6T/xyrL/AIwRf8QG&#xA;KqOtat+j4EWGL61qFy3pWNmDxMknizUPCNPtSPQ8V7E0BVb0XTG0+0KSy/Wb2dzPfXRHH1Z2ADMF&#xA;qeKgKERanigC1NMVR+KsevNAmvfNTXs0NpLYx21qqfWrYTv6iSztJ6LmRfSNGSp4Ht4Yqlflny95&#xA;ps73SJtTvXuLa1tmjSAseUbTRq8v1huXGUrKOEVB8KL1PI4qzXFUBrWlLqVn6SyG3uoXWeyu1HJo&#xA;Z0+w4FRUblWWvxKSp2JxVbourNfRPFcxfVtTtSEvrSvLixqFdG25xScS0b03GxAYMoVTHFULpP8A&#xA;xyrL/jBF/wAQGKq31a3+sm69JfrJT0vWoOfAHlxr1pXfFVTFXYq7FXYq7FXYqpm2tzcrdGJTcojR&#xA;LNQcwjkMy160JUHFVTFWGzN5utbZ7nS5JLuP6hamxspUhMAnKS891SOYgcIusn7X3KoafXfzOju/&#xA;3ejQzx+hMQF+GP1FA9MEs4cHcnaoIHHYnkFWQaPe+aZNZv7TVLOCPT7dIfqd/Czhp3ZP3rek3MIv&#xA;PlRfUJWm9ag4qneKuxV2KuxVJPNJ80iKwPlww/WPrR+tJcisTQG3mHxkfEvGX02+HckcehOKsfGv&#xA;fmJaaK8tzp0bTWVuks9xKqn1jHZSSyALFIgVnnjQcuIVefEK1OWKpn5f1HzpPeRvq1ikFpN8DRAA&#xA;PGwWRhNszgIwjWqFmYM9K/Caqp9pP/HKsv8AjBF/xAYqisVdirsVdirsVdirsVdirsVQuk/8cqy/&#xA;4wRf8QGKorFXYq7FXYq7FXYq7FXYq7FWLatH5kbRdLOil+QhTksRiU+rwQwmUy/7oBDepw+PpQMO&#xA;SlVDS335kyzzmPT4IxazO1tGSqxzqba5CI0onkYp6wg+P01bf7GxxVMufmy+8mkyIum+ZJoSv7ng&#xA;6xScqB1V2dPs/FxZj4VOKpVb3H5p201wk9pZ3gf1ZUkjYCNGMAaOKPlJC5VJvgHJKyfEzGKi8lVm&#xA;i3f5nSahDDqmnxRacG9Z7pHjEx5zmsbx+rIqqIn+ypagUfGzGgVZH5ks9UvLGK306UwSPPH60oLi&#xA;kQNX3jkgk/4FwcVSjTLDzzba7EJ7tJdAS4f92fin9P6uUWrOXb01kjVhV2cs55bLUqp7rias+n8d&#xA;KdY7317Yh3XmoiFxGZuS8o6j0uWwYHw3xVjVpd/mclwLOW0tjCFiAv3RXHIzwiRmVbpG/uTNROPw&#xA;lU+J6lcVTbQJ/OT3JGuQWq27xcla3Uo0cnGJuDVmn51MrpUAf3fLo4AVTTSf+OVZf8YIv+IDFUVi&#xA;rsVdirsVdirsVdirsVdiqF0n/jlWX/GCL/iAxVFYq7FXYq7FXYq7FXYq7FXYqxfVR5j/AELpTaKr&#xA;uwiTnHE8UZMhRfRMrSq/7gGvqcAX6UBHIFVCyX35lST3Bj0+3jFtK7W0bFFjnU21zwRpRPI3D1hB&#xA;V/TVt/sbHFU4s38y3vlTldJHpvmGW3cAL8ccc+4janJ/hOzFeRp0riqTyJ55ntYppVnt2EPqXdrb&#xA;PbG4rdSvK9vC8hMBe1VI4g7UDAuQeVDiqvYy+f3vLOO9iijghniNzKiRsJLc2ziQFvXU8/XZa0hU&#xA;Cm3IYqmfmhdZayhGl+ty9YfWRamBbj0uD8fSNx+62l9Mty/Z5dehVS+wufPk2o2kOoWkNvb20q/X&#xA;bqAo0VwjRXXL0gZTKqqwtvtIDyJoCu+KsoxVhv1n8wbOW+ljsm1Dl6gihd7YL6x9QxPB+8hpbgem&#xA;riRufcCvIlVkehLqq6XEurMHvwZBKyqFBHqNwIAaT9inf7umKquk/wDHKsv+MEX/ABAYqisVdirs&#xA;VdirsVdirsVdirsVSrStV0saXZg3kAIgjqPUT+Qe+Kov9LaV/wAtsH/I1P64q79LaV/y2wf8jU/r&#xA;irv0tpX/AC2wf8jU/rirv0tpX/LbB/yNT+uKu/S2lf8ALbB/yNT+uKu/S2lf8tsH/I1P64q79LaV&#xA;/wAtsH/I1P64q79LaV/y2wf8jU/rirv0tpX/AC2wf8jU/rir/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>114.236328</stDim:w>
            <stDim:h>364.251953</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DocumentID>xmp.did:0A9535CB0BC5E8119397DF298C77B328</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:0A9535CB0BC5E8119397DF298C77B328</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:a164de54-1f87-4a16-aa62-ba69937cf3ee</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:606788ce-5324-44e1-9f96-893118ee4b09</stRef:instanceID>
            <stRef:documentID>uuid:a164de54-1f87-4a16-aa62-ba69937cf3ee</stRef:documentID>
            <stRef:originalDocumentID>uuid:a164de54-1f87-4a16-aa62-ba69937cf3ee</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0A9535CB0BC5E8119397DF298C77B328</stEvt:instanceID>
                  <stEvt:when>2018-09-30T20:00:36-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -364.535 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 364.535 li
114.52 364.535 li
114.52 0 li
cp
clp
.566929 lw
1 lc
1 lj
4 ml
[] 0 dsh
true sadj
40.9067 10.9673 mo
42.9224 10.9673 44.5562 9.33301 44.5562 7.31738 cv
44.5562 5.30176 42.9224 3.66797 40.9067 3.66797 cv
35.5547 3.66797 li
35.5547 18.2666 li
41.7173 18.2666 li
43.7329 18.21 45.3213 16.5303 45.2651 14.5146 cv
45.2109 12.5781 43.6538 11.021 41.7173 10.9673 cv
35.5547 10.9673 li
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
@
49.1782 13.3994 mo
57.2881 13.3994 li
57.2881 12.5884 li
57.229 10.3491 55.3652 8.58154 53.126 8.64063 cv
50.9697 8.69775 49.2354 10.4321 49.1782 12.5884 cv
49.1782 14.21 li
49.1758 16.5581 51.0776 18.4639 53.4258 18.4663 cv
54.7476 18.4678 55.9946 17.854 56.8003 16.8066 cv
@
61.1797 13.3994 mo
69.29 13.3994 li
69.29 12.5884 li
69.2305 10.3491 67.3672 8.58154 65.127 8.64063 cv
62.9717 8.69824 61.2373 10.4326 61.1797 12.5884 cv
61.1797 14.21 li
61.1777 16.5581 63.0801 18.4639 65.4277 18.4663 cv
66.75 18.4678 67.9961 17.854 68.8027 16.8066 cv
@
73.1816 3.66797 mo
73.1816 18.2666 li
73.1816 10.9673 li
82.9131 10.9673 li
82.9131 18.2666 li
82.9131 3.66797 li
@
86.8047 3.66797 mo
86.8047 4.47852 li
@
86.8047 8.53516 mo
86.8047 18.2666 li
@
90.6973 8.53516 mo
94.75 18.2666 li
98.8066 8.53516 li
@
102.699 13.3994 mo
110.809 13.3994 li
110.809 12.5884 li
110.75 10.3491 108.887 8.58154 106.646 8.64063 cv
104.49 8.69775 102.756 10.4321 102.699 12.5884 cv
102.699 14.21 li
102.697 16.5581 104.599 18.4639 106.947 18.4663 cv
108.269 18.4678 109.516 17.854 110.321 16.8066 cv
@
67.1777 27.5103 mo
67.1777 21.6084 li
69.4707 25.8716 li
71.7676 21.6084 li
71.7676 27.5103 li
@
76.7539 23.5757 mo
76.7539 25.8716 li
76.7539 26.8135 75.9902 27.5767 75.0488 27.5767 cv
74.1074 27.5767 73.3438 26.8135 73.3438 25.8716 cv
73.3438 25.8716 li
73.3438 25.2139 li
73.3438 24.2725 74.1074 23.5088 75.0488 23.5088 cv
75.9902 23.5088 76.7539 24.2725 76.7539 25.2139 cv
76.7539 26.79 li
76.7949 27.2178 77.1152 27.5659 77.5391 27.6406 cv
@
81.9326 24.1001 mo
81.3203 23.4424 80.291 23.4063 79.6328 24.0186 cv
79.3008 24.3276 79.1133 24.7607 79.1152 25.2139 cv
79.1152 25.8716 li
79.1191 26.772 79.8516 27.4985 80.752 27.4946 cv
81.3145 27.4922 81.835 27.2002 82.1309 26.7222 cv
@
83.707 27.5103 mo
83.707 23.5757 li
83.707 24.8882 li
83.7061 24.5537 83.8213 24.229 84.0332 23.9697 cv
84.3594 23.5713 84.9473 23.5127 85.3457 23.8394 cv
85.3926 23.8784 85.4365 23.9219 85.4756 23.9697 cv
@
86.9863 25.8716 mo
86.9863 25.2139 li
86.9863 24.3091 87.7207 23.5757 88.625 23.5757 cv
89.5293 23.5757 90.2637 24.3091 90.2637 25.2139 cv
90.2637 25.8716 li
90.2637 26.7764 89.5293 27.5103 88.625 27.5103 cv
87.7207 27.5103 86.9863 26.7764 86.9863 25.8716 cv
@
96.0371 25.543 mo
96.0391 26.7012 96.9785 27.6396 98.1367 27.6387 cv
99.2939 27.6377 100.232 26.7002 100.232 25.543 cv
100.232 23.5757 li
100.232 22.417 99.292 21.4785 98.1338 21.4795 cv
96.9766 21.4805 96.0391 22.4185 96.0371 23.5757 cv
96.0371 25.543 li
@
105.61 22.1982 mo
105.385 21.897 105.059 21.6875 104.691 21.6084 cv
104.084 21.4761 103.454 21.4985 102.857 21.6738 cv
102.488 21.7847 102.165 22.0146 101.939 22.3281 cv
101.553 22.8657 101.674 23.6152 102.211 24.002 cv
102.309 24.0723 102.416 24.127 102.529 24.165 cv
104.825 24.9531 li
105.453 25.165 105.789 25.8452 105.578 26.4727 cv
105.539 26.5859 105.484 26.6929 105.414 26.79 cv
105.189 27.1035 104.866 27.334 104.496 27.4448 cv
103.898 27.6206 103.268 27.6431 102.659 27.5103 cv
102.292 27.4307 101.966 27.2217 101.741 26.9204 cv
@
110.792 22.4614 mo
110.281 21.5313 109.113 21.1909 108.182 21.7021 cv
107.549 22.0498 107.164 22.7231 107.187 23.4453 cv
107.187 25.6733 li
107.188 26.7612 108.072 27.6416 109.16 27.6396 cv
109.967 27.6382 110.69 27.1455 110.988 26.396 cv
@
92.4063 336.826 mo
92.4063 337.939 93.3711 338.84 94.5596 338.84 cv
95.748 338.84 96.7129 337.939 96.7129 336.826 cv
96.7129 334.939 li
96.7129 333.826 95.748 332.925 94.5596 332.925 cv
93.3711 332.925 92.4063 333.826 92.4063 334.939 cv
92.4063 336.826 li
@
98.3281 334.939 mo
98.3281 337.141 li
98.3281 338.01 99.0801 338.715 100.009 338.715 cv
100.938 338.715 101.689 338.01 101.689 337.141 cv
101.689 338.715 li
101.689 334.939 li
@
103.91 333.051 mo
103.91 334.939 li
104.918 334.939 li
103.234 334.939 li
103.91 334.939 li
103.91 337.961 li
103.91 338.331 104.193 338.648 104.581 338.715 cv
@
88.5029 298.852 mo
88.5029 304.515 li
88.5029 301.683 li
92.5391 301.683 li
92.5391 304.515 li
92.5391 298.852 li
@
97.6533 300.738 mo
97.6533 302.941 li
97.6533 303.845 96.8711 304.576 95.9043 304.576 cv
94.9385 304.576 94.1553 303.845 94.1553 302.941 cv
94.1553 302.313 li
94.1553 301.408 94.9385 300.676 95.9043 300.676 cv
96.8711 300.676 97.6533 301.408 97.6533 302.313 cv
97.6533 303.822 li
97.6953 304.234 98.0254 304.568 98.4609 304.639 cv
@
100.074 304.512 mo
100.074 300.736 li
100.074 301.994 li
100.074 301.674 100.191 301.361 100.408 301.113 cv
100.745 300.73 101.349 300.676 101.758 300.99 cv
101.805 301.027 101.85 301.068 101.889 301.113 cv
@
103.436 304.512 mo
103.436 300.736 li
103.436 301.994 li
103.471 301.301 104.1 300.764 104.843 300.795 cv
105.538 300.824 106.094 301.345 106.126 301.994 cv
106.126 304.512 li
106.126 301.994 li
106.126 301.299 106.729 300.736 107.473 300.736 cv
108.217 300.736 108.818 301.299 108.818 301.994 cv
108.818 304.512 li
@
65.6191 301.683 mo
68.9805 301.683 li
@
69.6523 298.852 mo
65.6191 298.852 li
65.6191 304.515 li
@
71.2686 304.515 mo
71.2686 298.852 li
73.624 302.941 li
75.9766 298.852 li
75.9766 304.515 li
@
87.1602 270.748 mo
87.1602 265.084 li
89.5117 269.175 li
91.8672 265.084 li
91.8672 270.748 li
@
93.4834 269.175 mo
93.4834 268.546 li
93.4834 267.677 94.2363 266.973 95.1641 266.973 cv
96.0928 266.973 96.8457 267.677 96.8457 268.546 cv
96.8457 269.175 li
96.8457 270.044 96.0928 270.748 95.1641 270.748 cv
94.2363 270.748 93.4834 270.044 93.4834 269.175 cv
@
98.4609 270.748 mo
98.4609 266.973 li
98.4609 268.23 li
98.4619 267.91 98.5811 267.598 98.7988 267.35 cv
99.1348 266.967 99.7383 266.912 100.147 267.227 cv
100.195 267.264 100.238 267.305 100.278 267.35 cv
@
101.823 272.637 mo
101.823 268.546 li
101.823 267.676 102.576 266.971 103.506 266.971 cv
104.435 266.971 105.188 267.676 105.188 268.546 cv
105.188 268.546 li
105.188 269.175 li
105.188 270.045 104.435 270.75 103.506 270.75 cv
102.576 270.75 101.823 270.045 101.823 269.175 cv
101.823 266.973 li
@
106.801 265.084 mo
106.801 270.748 li
106.801 268.546 li
106.801 267.677 107.553 266.973 108.482 266.973 cv
109.41 266.973 110.162 267.677 110.162 268.546 cv
110.162 270.748 li
@
2.87988 265.084 mo
6.9165 265.084 li
4.89795 265.084 li
4.89795 270.748 li
@
8.53223 265.084 mo
8.53223 265.399 li
@
8.53223 266.973 mo
8.53223 270.748 li
@
10.145 270.748 mo
10.145 266.973 li
10.145 268.23 li
10.145 267.536 10.748 266.973 11.4917 266.973 cv
12.2354 266.973 12.8379 267.536 12.8379 268.23 cv
12.8379 270.748 li
12.8379 268.23 li
12.8721 267.537 13.502 267 14.2446 267.031 cv
14.9399 267.062 15.4961 267.581 15.5278 268.23 cv
15.5278 270.748 li
@
17.1411 265.084 mo
17.1411 269.175 li
17.1416 270.044 17.894 270.748 18.8228 270.748 cv
19.7505 270.747 20.5024 270.043 20.5029 269.175 cv
20.5029 268.546 li
20.5024 267.677 19.7495 266.973 18.8213 266.973 cv
17.8936 266.974 17.1416 267.678 17.1411 268.546 cv
17.1411 270.748 li
@
22.1157 270.748 mo
22.1157 266.973 li
22.1157 268.23 li
22.1162 267.91 22.2354 267.598 22.4531 267.35 cv
22.7896 266.967 23.3931 266.912 23.8018 267.227 cv
23.8496 267.264 23.8936 267.305 23.9326 267.35 cv
@
25.4775 268.86 mo
28.8423 268.86 li
28.8423 268.546 li
28.8423 267.676 28.0894 266.971 27.1602 266.971 cv
26.231 266.971 25.4775 267.676 25.4775 268.546 cv
25.4775 268.546 li
25.4775 269.175 li
25.4756 270.086 26.2632 270.826 27.2368 270.828 cv
27.7871 270.83 28.3066 270.59 28.6411 270.182 cv
@
9.47021 301.683 mo
10.9502 301.683 li
10.9502 302.627 li
10.9497 303.738 9.98633 304.639 8.79785 304.639 cv
7.61035 304.639 6.64746 303.738 6.64697 302.627 cv
6.64697 300.738 li
6.62451 299.668 7.53467 298.783 8.68018 298.762 cv
9.40918 298.748 10.0923 299.093 10.4795 299.67 cv
@
16.064 300.736 mo
16.064 302.938 li
16.064 303.842 15.2808 304.574 14.3149 304.574 cv
13.3491 304.574 12.5659 303.842 12.5659 302.938 cv
12.5659 302.938 li
12.5659 302.309 li
12.5659 301.406 13.3491 300.674 14.3149 300.674 cv
15.2808 300.674 16.064 301.406 16.064 302.309 cv
16.064 303.82 li
16.105 304.23 16.436 304.565 16.8716 304.637 cv
@
19.0913 298.846 mo
19.0913 300.732 li
20.1001 300.732 li
18.4165 300.732 li
19.0913 300.732 li
19.0913 303.755 li
19.0923 304.125 19.3745 304.442 19.7632 304.509 cv
@
21.7134 302.618 mo
25.0752 302.618 li
25.0752 302.304 li
25.0742 301.435 24.3208 300.73 23.3926 300.732 cv
22.4653 300.732 21.7144 301.436 21.7134 302.304 cv
21.7134 302.933 li
21.7129 303.844 22.5024 304.582 23.4761 304.583 cv
24.0234 304.583 24.54 304.346 24.874 303.939 cv
@
32.7627 304.515 mo
32.7627 298.852 li
35.1152 302.941 li
37.4712 298.852 li
37.4712 304.515 li
@
39.0869 302.941 mo
39.0869 302.313 li
39.0874 301.443 39.8403 300.739 40.7686 300.739 cv
41.6963 300.74 42.4482 301.443 42.4487 302.313 cv
42.4487 302.941 li
42.4482 303.811 41.6953 304.514 40.7671 304.514 cv
39.8394 304.514 39.0874 303.81 39.0869 302.941 cv
@
47.4292 298.852 mo
47.4292 302.941 li
47.4561 303.81 46.7246 304.534 45.7949 304.56 cv
44.8794 304.584 44.1104 303.921 44.0645 303.066 cv
44.0645 302.313 li
44.0645 301.442 44.8179 300.737 45.7466 300.737 cv
46.6758 300.737 47.4292 301.442 47.4292 302.313 cv
47.4292 304.515 li
@
49.0391 302.627 mo
52.4038 302.627 li
52.4038 302.313 li
52.4038 301.442 51.6509 300.737 50.7217 300.737 cv
49.7925 300.737 49.0391 301.442 49.0391 302.313 cv
49.0391 302.313 li
49.0391 302.941 li
49.0371 303.853 49.8247 304.593 50.7983 304.595 cv
51.3486 304.596 51.8682 304.356 52.2026 303.947 cv
@
54.0171 298.852 mo
54.0171 303.761 li
54.0176 304.131 54.3003 304.447 54.6885 304.515 cv
@
64.542 336.826 mo
64.542 337.939 65.5059 338.84 66.6953 338.84 cv
67.8838 338.84 68.8477 337.939 68.8477 336.826 cv
68.8477 334.939 li
68.8477 333.826 67.8838 332.925 66.6953 332.925 cv
65.5059 332.925 64.542 333.826 64.542 334.939 cv
64.542 336.826 li
@
70.4629 334.939 mo
70.4629 337.141 li
70.4648 338.01 71.2188 338.713 72.1465 338.713 cv
73.0732 338.711 73.8242 338.008 73.8252 337.141 cv
73.8252 338.715 li
73.8252 334.939 li
@
76.0449 333.051 mo
76.0449 334.939 li
77.0547 334.939 li
75.3701 334.939 li
76.0449 334.939 li
76.0449 337.961 li
76.0459 338.331 76.3281 338.648 76.7168 338.715 cv
@
32.6948 333.051 mo
34.7129 338.715 li
36.7314 333.051 li
@
38.3472 339.092 mo
40.9038 332.736 li
@
42.5195 336.826 mo
42.5195 337.939 43.4834 338.84 44.6724 338.84 cv
45.8613 338.84 46.8252 337.939 46.8252 336.826 cv
46.8252 334.939 li
46.8252 333.826 45.8613 332.925 44.6724 332.925 cv
43.4834 332.925 42.5195 333.826 42.5195 334.939 cv
42.5195 336.826 li
@
51.3296 335.443 mo
50.7051 334.811 49.6509 334.771 48.9741 335.355 cv
48.6294 335.653 48.4351 336.073 48.4385 336.512 cv
48.4385 337.141 li
48.4424 338.006 49.1948 338.703 50.1182 338.699 cv
50.6934 338.696 51.2271 338.418 51.5308 337.961 cv
@
53.7534 333.051 mo
53.7534 334.939 li
54.7622 334.939 li
53.0786 334.939 li
53.7534 334.939 li
53.7534 337.961 li
53.7539 338.331 54.0366 338.648 54.4253 338.715 cv
@
9.47021 335.883 mo
10.9502 335.883 li
10.9502 336.826 li
10.9497 337.938 9.98633 338.839 8.79785 338.838 cv
7.61035 338.838 6.64746 337.938 6.64697 336.826 cv
6.64697 334.939 li
6.62451 333.868 7.53467 332.982 8.68018 332.962 cv
9.40918 332.948 10.0923 333.293 10.4795 333.87 cv
@
16.064 334.936 mo
16.064 337.139 li
16.064 338.042 15.2808 338.773 14.3149 338.773 cv
13.3491 338.773 12.5659 338.042 12.5659 337.139 cv
12.5659 336.51 li
12.5659 335.605 13.3491 334.873 14.3149 334.873 cv
15.2808 334.873 16.064 335.605 16.064 336.51 cv
16.064 338.02 li
16.105 338.432 16.436 338.766 16.8716 338.836 cv
@
19.0913 333.045 mo
19.0913 334.934 li
20.1001 334.934 li
18.4165 334.934 li
19.0913 334.934 li
19.0913 337.955 li
19.0923 338.325 19.3745 338.643 19.7632 338.709 cv
@
21.7134 336.818 mo
25.0752 336.818 li
25.0752 336.504 li
25.0742 335.635 24.3208 334.932 23.3926 334.932 cv
22.4653 334.933 21.7144 335.636 21.7134 336.504 cv
21.7134 337.133 li
21.7129 338.044 22.5024 338.783 23.4761 338.783 cv
24.0234 338.783 24.54 338.545 24.874 338.139 cv
@
79.1016 132.474 mo
79.1016 125.104 li
82.166 130.428 li
85.2305 125.104 li
85.2305 132.474 li
@
87.3301 130.428 mo
87.3301 129.608 li
87.332 128.478 88.3125 127.563 89.5215 127.564 cv
90.7285 127.566 91.7051 128.48 91.707 129.608 cv
91.707 130.428 li
91.7051 131.558 90.7246 132.473 89.5156 132.472 cv
88.3096 132.47 87.332 131.556 87.3301 130.428 cv
@
93.8105 132.474 mo
93.8105 127.562 li
93.8105 129.197 li
93.8105 128.78 93.9648 128.375 94.2461 128.052 cv
94.6836 127.555 95.4697 127.483 96.002 127.892 cv
96.0645 127.939 96.123 127.994 96.1738 128.052 cv
@
98.1836 134.932 mo
98.1836 129.608 li
98.1836 128.478 99.1641 127.561 100.374 127.561 cv
101.584 127.561 102.563 128.478 102.563 129.608 cv
102.563 130.428 li
102.563 131.559 101.584 132.476 100.374 132.476 cv
99.1641 132.476 98.1836 131.559 98.1836 130.428 cv
98.1836 127.562 li
@
104.661 125.102 mo
104.661 132.471 li
104.661 129.605 li
104.661 128.475 105.641 127.559 106.85 127.559 cv
108.059 127.559 109.038 128.475 109.038 129.605 cv
109.038 132.471 li
@
80.8535 60.3042 mo
80.8535 67.6743 li
80.8535 63.9893 li
86.1055 63.9893 li
86.1055 67.6743 li
86.1055 60.3042 li
@
92.7588 62.7617 mo
92.7588 65.6274 li
92.7578 66.8032 91.7363 67.7554 90.4805 67.7539 cv
89.2246 67.7529 88.207 66.8018 88.2061 65.6274 cv
88.2061 64.8086 li
88.207 63.6328 89.2275 62.6807 90.4844 62.6816 cv
91.7402 62.6831 92.7578 63.6343 92.7588 64.8086 cv
92.7588 66.7729 li
92.8115 67.3096 93.2422 67.7461 93.8105 67.8389 cv
@
95.9102 67.6743 mo
95.9102 62.7617 li
95.9102 64.3975 li
95.9102 63.98 96.0645 63.5752 96.3477 63.252 cv
96.7852 62.7559 97.5713 62.6851 98.1035 63.0942 cv
98.1641 63.1416 98.2207 63.1943 98.2715 63.252 cv
@
100.285 67.6743 mo
100.285 62.7617 li
100.285 64.3975 li
100.285 63.4922 101.068 62.7588 102.037 62.7588 cv
103.004 62.7588 103.788 63.4922 103.788 64.3975 cv
103.788 67.6743 li
103.788 64.3975 li
103.827 63.4932 104.643 62.7896 105.609 62.8262 cv
106.521 62.8604 107.252 63.5439 107.289 64.3975 cv
107.289 67.6743 li
@
8.17773 63.9893 mo
12.5547 63.9893 li
@
13.4277 60.3042 mo
8.17773 60.3042 li
8.17773 67.6743 li
@
15.5308 67.6743 mo
15.5308 62.7617 li
15.5308 64.3975 li
15.5308 63.98 15.6851 63.5752 15.9673 63.252 cv
16.4048 62.7549 17.1904 62.6831 17.7227 63.0913 cv
17.7856 63.1396 17.8433 63.1934 17.895 63.252 cv
@
19.9106 65.2168 mo
24.2871 65.2168 li
24.2871 64.8086 li
24.2861 63.6782 23.3057 62.7627 22.0972 62.7632 cv
20.8896 62.7642 19.9111 63.6792 19.9106 64.8086 cv
19.9106 65.6274 li
19.9116 66.8125 20.9409 67.7725 22.209 67.771 cv
22.9194 67.7705 23.5894 67.4624 24.0234 66.937 cv
@
30.7612 62.7617 mo
30.7612 65.6274 li
30.7612 66.7578 29.7817 67.6743 28.5732 67.6743 cv
27.3647 67.6743 26.3848 66.7578 26.3848 65.6274 cv
26.3848 64.8086 li
26.3848 63.6782 27.3647 62.7617 28.5732 62.7617 cv
29.7817 62.7617 30.7612 63.6782 30.7612 64.8086 cv
30.7612 70.1318 li
@
2.57666 125.104 mo
7.8291 125.104 li
5.2041 125.104 li
5.2041 132.474 li
@
9.93262 125.104 mo
9.93262 125.512 li
@
9.93262 127.562 mo
9.93262 132.474 li
@
12.0327 132.474 mo
12.0327 127.562 li
12.0327 129.197 li
12.0327 128.292 12.8174 127.559 13.7847 127.559 cv
14.7524 127.559 15.5366 128.292 15.5366 129.197 cv
15.5366 132.474 li
15.5366 129.197 li
15.5757 128.293 16.3906 127.59 17.3574 127.626 cv
18.2695 127.661 19.0005 128.344 19.0371 129.197 cv
19.0371 132.474 li
@
21.1377 125.104 mo
21.1377 130.428 li
21.1377 131.558 22.1177 132.474 23.3262 132.474 cv
24.5347 132.474 25.5146 131.558 25.5146 130.428 cv
25.5146 130.428 li
25.5146 129.608 li
25.5146 128.478 24.5347 127.562 23.3262 127.562 cv
22.1177 127.562 21.1377 128.478 21.1377 129.608 cv
21.1377 132.474 li
@
27.6123 132.474 mo
27.6123 127.562 li
27.6123 129.197 li
27.6128 128.78 27.7681 128.375 28.0518 128.052 cv
28.4897 127.556 29.2759 127.485 29.8071 127.895 cv
29.8687 127.942 29.9253 127.995 29.9761 128.052 cv
@
31.9888 130.017 mo
36.3657 130.017 li
36.3657 129.608 li
36.3657 128.478 35.3857 127.562 34.1772 127.562 cv
32.9688 127.562 31.9888 128.478 31.9888 129.608 cv
31.9888 130.428 li
31.9902 131.613 33.019 132.572 34.2871 132.571 cv
34.9976 132.57 35.6675 132.263 36.1021 131.737 cv
@
50.5303 243.989 mo
54.9067 243.989 li
@
55.7827 240.305 mo
50.5303 240.305 li
50.5303 247.674 li
@
57.8867 247.674 mo
57.8867 240.305 li
60.9502 245.627 li
64.0117 240.305 li
64.0117 247.674 li
@
61.5625 216.632 mo
66.0869 216.632 li
@
63.8242 218.895 mo
63.8242 214.367 li
@
57.2627 210.855 mo
57.2627 219.852 li
@
48.2314 216.374 mo
52.7583 216.374 li
@
.283465 lw
114.378 .141602 mo
114.378 364.394 li
.141602 364.394 li
.141602 .141602 li
114.378 .141602 li
@
27.1943 151.957 mo
26.1455 150.906 li
25.5332 151.171 24.7974 151.058 24.2974 150.558 cv
23.8296 150.089 23.7021 149.416 23.9023 148.83 cv
24.8535 149.781 li
24.9424 149.869 25.0894 149.869 25.1782 149.78 cv
25.8853 149.072 li
25.9756 148.982 25.9756 148.835 25.8862 148.748 cv
24.9355 147.796 li
25.5225 147.597 26.1963 147.723 26.6636 148.19 cv
27.1636 148.69 27.2773 149.428 27.0112 150.039 cv
28.0625 151.088 li
27.1943 151.957 li
cp
.137255 .121569 .12549 rgb
f
87.1855 151.931 mo
86.7246 152.054 86.2773 151.874 86.1836 151.531 cv
86.0918 151.185 86.3906 150.806 86.8516 150.683 cv
87.3105 150.56 87.7598 150.74 87.8516 151.083 cv
87.9453 151.427 87.6465 151.808 87.1855 151.931 cv
f
88.6699 150.455 mo
88.209 150.578 87.7617 150.398 87.668 150.054 cv
87.5762 149.708 87.875 149.33 88.3359 149.207 cv
88.7949 149.083 89.2441 149.263 89.3359 149.607 cv
89.4297 149.951 89.1309 150.332 88.6699 150.455 cv
f
90.1543 148.978 mo
89.6934 149.101 89.2461 148.921 89.1523 148.578 cv
89.0605 148.232 89.3594 147.853 89.8203 147.73 cv
90.2793 147.607 90.7285 147.787 90.8203 148.13 cv
90.9141 148.474 90.6152 148.855 90.1543 148.978 cv
f
50.9175 72.042 mo
50.6113 72.3682 50.1895 72.5479 49.7285 72.5479 cv
48.7993 72.5479 47.8384 71.792 47.8384 70.5269 cv
47.8384 69.9619 47.7217 69.6421 47.6235 69.4731 cv
47.5264 69.3062 47.4063 69.2139 47.2866 69.2139 cv
47.0435 69.2139 46.6836 69.6318 46.6836 70.5269 cv
46.6836 70.665 46.5703 70.7769 46.4336 70.7769 cv
46.2954 70.7769 46.1836 70.665 46.1836 70.5269 cv
46.1836 69.3369 46.7383 68.7139 47.2866 68.7139 cv
47.5884 68.7139 47.8687 68.8989 48.0557 69.2222 cv
48.2402 69.54 48.3384 69.9922 48.3384 70.5269 cv
48.3384 71.9858 49.9023 72.396 50.5522 71.7002 cv
50.8032 71.4331 50.9355 71.0269 50.9355 70.5269 cv
50.9355 70.3901 51.0474 70.2769 51.1855 70.2769 cv
51.3223 70.2769 51.4355 70.3901 51.4355 70.5269 cv
51.4355 71.1563 51.2563 71.6802 50.9175 72.042 cv
f
51.6934 100.853 mo
50.1777 100.853 49.8105 99.9463 49.543 99.2852 cv
49.3311 98.7607 49.2109 98.5088 48.8096 98.5088 cv
48.4092 98.5088 48.291 98.7598 48.0791 99.2842 cv
47.8105 99.9453 47.4443 100.853 45.9258 100.853 cv
45.9258 100.353 li
47.1074 100.353 47.3535 99.7432 47.6152 99.0957 cv
47.8213 98.5859 48.0547 98.0088 48.8096 98.0088 cv
49.5645 98.0088 49.7988 98.5869 50.0059 99.0967 cv
50.2676 99.7432 50.5146 100.353 51.6934 100.353 cv
51.6934 100.853 li
cp
f
49.9971 144.757 mo
49.9971 144.892 49.311 145.304 49.2822 145.321 cv
49.167 145.419 49.0361 145.505 48.876 145.563 cv
48.3433 145.753 47.7959 145.587 47.6553 145.193 cv
47.5151 144.8 47.833 144.325 48.3662 144.136 cv
48.8311 143.97 49.2881 144.085 49.4971 144.372 cv
49.4971 143.417 li
49.3701 143.62 49.1553 143.798 48.876 143.897 cv
48.3433 144.089 47.7959 143.923 47.6553 143.527 cv
47.5151 143.136 47.833 142.66 48.3662 142.472 cv
48.8311 142.306 49.2881 142.419 49.4971 142.708 cv
49.4971 141.753 li
49.3701 141.956 49.1553 142.134 48.876 142.233 cv
48.3433 142.425 47.7959 142.259 47.6553 141.863 cv
47.5151 141.472 47.833 140.996 48.3662 140.808 cv
48.8311 140.642 49.2881 140.755 49.4971 141.044 cv
49.4971 139.87 li
49.4971 139.733 49.6089 139.62 49.7471 139.62 cv
49.8853 139.62 49.9971 139.733 49.9971 139.87 cv
49.9971 144.757 li
cp
f
47.2305 54.0947 mo
47.9385 53.4897 li
48.0327 53.4097 48.1685 53.4097 48.2627 53.4897 cv
49.5186 54.5605 li
50.0645 54.0947 li
50.1685 54.0068 50.3267 54.0166 50.4165 54.1226 cv
50.5054 54.2266 50.4946 54.3857 50.3887 54.4746 cv
49.6807 55.0806 li
49.6338 55.1206 49.5767 55.1396 49.5186 55.1396 cv
49.4604 55.1396 49.4033 55.1206 49.3564 55.0806 cv
48.1006 54.0098 li
47.5547 54.4746 li
47.4517 54.5649 47.2935 54.5537 47.2026 54.4468 cv
47.1138 54.3428 47.1245 54.1836 47.2305 54.0947 cv
f
50.4766 58.7817 mo
50.4766 58.9199 50.3647 59.0317 50.2266 59.0317 cv
48.8076 59.0317 li
48.6694 59.0317 48.5576 58.9199 48.5576 58.7817 cv
48.5576 57.8218 li
47.6426 57.8218 li
47.6426 58.1768 li
47.6426 58.314 47.5308 58.4268 47.3926 58.4268 cv
47.2544 58.4268 47.1426 58.314 47.1426 58.1768 cv
47.1426 57.5718 li
47.1426 57.4336 47.2544 57.3218 47.3926 57.3218 cv
48.8076 57.3218 li
48.9453 57.3218 49.0576 57.4336 49.0576 57.5718 cv
49.0576 58.5317 li
49.9766 58.5317 li
49.9766 58.1768 li
49.9766 58.0386 50.0884 57.9268 50.2266 57.9268 cv
50.3647 57.9268 50.4766 58.0386 50.4766 58.1768 cv
50.4766 58.7817 li
cp
f
50.4766 56.1157 mo
50.4766 56.2539 50.3647 56.3657 50.2266 56.3657 cv
50.0884 56.3657 49.9766 56.2539 49.9766 56.1157 cv
49.9766 55.8887 li
47.4907 56.9487 li
47.4585 56.9629 47.4258 56.9697 47.3926 56.9697 cv
47.3447 56.9697 47.2954 56.9556 47.2544 56.9277 cv
47.1846 56.8818 47.1426 56.8027 47.1426 56.7197 cv
47.1426 56.1138 li
47.1426 55.9756 47.2544 55.8638 47.3926 55.8638 cv
47.5308 55.8638 47.6426 55.9756 47.6426 56.1138 cv
47.6426 56.3408 li
50.1284 55.2808 li
50.2056 55.2476 50.2954 55.2559 50.3647 55.3018 cv
50.4346 55.3477 50.4766 55.4268 50.4766 55.5107 cv
50.4766 56.1157 li
cp
f
51.1855 116.257 mo
50.6597 116.257 50.3984 115.882 50.1885 115.582 cv
49.9834 115.287 49.8545 115.121 49.6006 115.121 cv
49.3477 115.121 49.2188 115.287 49.0137 115.582 cv
48.8037 115.882 48.5425 116.257 48.0166 116.257 cv
47.4917 116.257 47.2305 115.882 47.0205 115.582 cv
46.8154 115.287 46.6865 115.121 46.4336 115.121 cv
46.2954 115.121 46.1836 115.009 46.1836 114.871 cv
46.1836 114.734 46.2954 114.621 46.4336 114.621 cv
46.9595 114.621 47.2207 114.995 47.4307 115.296 cv
47.6357 115.591 47.7637 115.757 48.0166 115.757 cv
48.2695 115.757 48.3984 115.591 48.6035 115.296 cv
48.8135 114.995 49.0747 114.621 49.6006 114.621 cv
50.1274 114.621 50.3887 114.995 50.5986 115.296 cv
50.8037 115.591 50.9326 115.757 51.1855 115.757 cv
51.3237 115.757 51.4355 115.868 51.4355 116.007 cv
51.4355 116.144 51.3237 116.257 51.1855 116.257 cv
f
51.1855 114.312 mo
50.8008 114.312 50.6216 113.992 50.4907 113.759 cv
50.2534 113.341 50.2085 113.341 49.9727 113.759 cv
49.8413 113.992 49.6636 114.312 49.2783 114.312 cv
48.8936 114.312 48.7144 113.992 48.5845 113.759 cv
48.3506 113.341 48.3047 113.341 48.0703 113.759 cv
47.9404 113.992 47.7617 114.312 47.3774 114.312 cv
46.9946 114.312 46.8164 113.991 46.6865 113.759 cv
46.5835 113.574 46.5166 113.462 46.4336 113.462 cv
46.2954 113.462 46.1836 113.351 46.1836 113.212 cv
46.1836 113.074 46.2954 112.962 46.4336 112.962 cv
46.8164 112.962 46.9946 113.282 47.1235 113.515 cv
47.3237 113.874 47.3936 113.947 47.6348 113.515 cv
47.7646 113.282 47.9434 112.962 48.3276 112.962 cv
48.7114 112.962 48.8906 113.282 49.0205 113.515 cv
49.2554 113.937 49.3027 113.931 49.5376 113.515 cv
49.6675 113.282 49.8467 112.962 50.2314 112.962 cv
50.6167 112.962 50.7944 113.282 50.9258 113.515 cv
51.0435 113.724 51.1055 113.812 51.1855 113.812 cv
51.3237 113.812 51.4355 113.925 51.4355 114.062 cv
51.4355 114.199 51.3237 114.312 51.1855 114.312 cv
f
51.1855 112.47 mo
50.8735 112.47 50.7275 112.228 50.6304 112.066 cv
50.5884 111.997 50.5337 111.904 50.5024 111.904 cv
50.4736 111.904 50.4146 112.001 50.3755 112.066 cv
50.2793 112.228 50.1323 112.47 49.8218 112.47 cv
49.5098 112.47 49.3638 112.228 49.2666 112.066 cv
49.2285 112.001 49.1694 111.904 49.1416 111.904 cv
49.1138 111.904 49.0547 112.001 49.0166 112.066 cv
48.9194 112.228 48.7734 112.47 48.4624 112.47 cv
48.1523 112.47 48.0063 112.227 47.9106 112.065 cv
47.8735 112.005 47.8145 111.904 47.7876 111.904 cv
47.7598 111.904 47.6997 112.006 47.6636 112.066 cv
47.5664 112.228 47.4204 112.47 47.1104 112.47 cv
46.7993 112.47 46.6543 112.228 46.5576 112.066 cv
46.5215 112.006 46.4604 111.904 46.4336 111.904 cv
46.2954 111.904 46.1836 111.791 46.1836 111.654 cv
46.1836 111.517 46.2954 111.404 46.4336 111.404 cv
46.7456 111.404 46.8906 111.648 46.9873 111.81 cv
47.0234 111.869 47.0825 111.971 47.1104 111.971 cv
47.1377 111.971 47.1978 111.869 47.2334 111.81 cv
47.3306 111.648 47.4756 111.404 47.7876 111.404 cv
48.0977 111.404 48.2437 111.648 48.3394 111.81 cv
48.3755 111.869 48.4355 111.971 48.4624 111.971 cv
48.4907 111.971 48.5508 111.869 48.5864 111.81 cv
48.6836 111.648 48.8306 111.404 49.1416 111.404 cv
49.4536 111.404 49.5996 111.647 49.6968 111.809 cv
49.7344 111.872 49.7925 111.971 49.8218 111.971 cv
49.8506 111.971 49.9097 111.872 49.9487 111.809 cv
50.0444 111.647 50.1914 111.404 50.5024 111.404 cv
50.8154 111.404 50.9614 111.647 51.0586 111.809 cv
51.0977 111.872 51.1567 111.971 51.1855 111.971 cv
51.3237 111.971 51.4355 112.082 51.4355 112.221 cv
51.4355 112.358 51.3237 112.47 51.1855 112.47 cv
f
50.8276 87.1763 mo
49.5137 87.1763 li
49.5137 85.8613 li
50.8276 85.8613 li
50.8276 87.1763 li
cp
46.7925 85.1084 mo
46.7925 83.7935 li
48.1064 83.7935 li
48.1064 85.1084 li
46.7925 85.1084 li
cp
47.7002 82.8857 mo
49.0146 82.8857 li
49.0146 84.2007 li
48.6064 84.2007 li
48.6064 83.2935 li
47.7002 83.2935 li
47.7002 82.8857 li
cp
49.0132 85.3613 mo
49.0132 86.3013 li
47.667 86.3013 li
47.667 85.6094 li
48.606 85.6094 li
48.606 84.7002 li
49.5151 84.7002 li
49.5151 82.3853 li
47.2002 82.3853 li
47.2002 83.2935 li
46.292 83.2935 li
46.292 85.6094 li
47.2329 85.6094 li
47.2329 86.7354 li
49.0132 86.7354 li
49.0132 87.6763 li
51.3271 87.6763 li
51.3271 85.3613 li
49.0132 85.3613 li
cp
f
50.9199 127.337 mo
49.8472 127.337 li
49.8472 126.55 li
50.9199 126.55 li
50.9199 127.337 li
cp
50.9199 128.624 mo
49.8472 128.624 li
49.8472 127.837 li
50.9199 127.837 li
50.9199 128.624 li
cp
50.9199 129.911 mo
49.8472 129.911 li
49.8472 129.124 li
50.9199 129.124 li
50.9199 129.911 li
cp
49.3472 127.337 mo
48.2729 127.337 li
48.2729 126.55 li
49.3472 126.55 li
49.3472 127.337 li
cp
49.3472 128.624 mo
48.2729 128.624 li
48.2729 127.837 li
49.3472 127.837 li
49.3472 128.624 li
cp
49.3472 129.911 mo
48.2729 129.911 li
48.2729 129.124 li
49.3472 129.124 li
49.3472 129.911 li
cp
47.7729 127.337 mo
46.7002 127.337 li
46.7002 126.55 li
47.7729 126.55 li
47.7729 127.337 li
cp
47.7729 128.624 mo
46.7002 128.624 li
46.7002 127.837 li
47.7729 127.837 li
47.7729 128.624 li
cp
47.7729 129.911 mo
46.7002 129.911 li
46.7002 129.124 li
47.7729 129.124 li
47.7729 129.911 li
cp
46.1992 126.05 mo
46.1992 130.411 li
51.4199 130.411 li
51.4199 126.05 li
46.1992 126.05 li
cp
f
47.6934 156.836 mo
47.458 156.836 47.2695 156.647 47.2695 156.412 cv
47.2695 156.178 47.458 155.986 47.6934 155.986 cv
47.9277 155.986 48.1172 156.178 48.1172 156.412 cv
48.1172 156.647 47.9277 156.836 47.6934 156.836 cv
f
49.7969 156.838 mo
49.5635 156.838 49.3711 156.647 49.3711 156.412 cv
49.3711 156.178 49.5635 155.986 49.7969 155.986 cv
50.0313 155.986 50.2207 156.178 50.2207 156.412 cv
50.2207 156.647 50.0313 156.838 49.7969 156.838 cv
f
48.8096 157.58 mo
47.6445 157.58 46.7002 157.065 46.7002 156.428 cv
46.7002 155.791 47.6445 155.276 48.8096 155.276 cv
49.9756 155.276 50.9189 155.791 50.9189 156.428 cv
50.9189 157.065 49.9756 157.58 48.8096 157.58 cv
cp
49.2871 158.256 mo
48.3359 158.256 li
48.3359 157.93 li
49.2871 157.93 li
49.2871 158.256 li
cp
51.3535 156.061 mo
51.0596 155.135 50.0361 154.445 48.8096 154.445 cv
47.583 154.445 46.5605 155.135 46.2666 156.061 cv
45.7773 156.061 li
45.7773 157.313 li
46.3301 157.313 li
46.5645 157.859 47.0557 158.303 47.6904 158.547 cv
47.6904 159.616 li
49.9297 159.616 li
49.9297 158.547 li
50.5645 158.303 51.0557 157.859 51.2891 157.313 cv
51.8418 157.313 li
51.8418 156.061 li
51.3535 156.061 li
cp
f
68.0273 71.4512 mo
67.8955 71.4873 67.7559 71.4082 67.7207 71.2754 cv
67.541 70.6113 li
67.2373 72.5381 li
67.2178 72.6611 67.0996 72.7363 66.9854 72.749 cv
66.8604 72.7461 66.7559 72.6523 66.7422 72.5283 cv
66.4902 70.3623 li
66.2715 72.0254 li
66.2559 72.1445 66.1582 72.2354 66.0391 72.2422 cv
65.9082 72.2617 65.8115 72.1729 65.7813 72.0566 cv
65.5898 71.334 li
65.3057 72.9746 li
65.2852 73.0957 65.1807 73.1816 65.0596 73.1816 cv
65.0537 73.1816 li
64.9268 73.1787 64.8242 73.082 64.8105 72.958 cv
64.5479 70.4561 li
64.3408 72.0254 li
64.3262 72.1406 64.2344 72.2295 64.1201 72.2422 cv
64.0029 72.2549 63.8965 72.1855 63.8584 72.0762 cv
63.377 70.7148 li
63.3311 70.584 63.3984 70.4414 63.5293 70.3955 cv
63.6582 70.3477 63.8018 70.417 63.8477 70.5488 cv
63.9824 70.9287 li
64.3291 68.2988 li
64.3457 68.1738 64.4521 68.0801 64.5771 68.0801 cv
64.5801 68.0801 li
64.707 68.082 64.8125 68.1787 64.8262 68.3047 cv
65.1211 71.1191 li
65.2949 70.1191 li
65.3145 70.0049 65.4131 69.917 65.5303 69.9121 cv
65.6611 69.9121 65.7529 69.9854 65.7832 70.0986 cv
65.9414 70.7012 li
66.2568 68.2988 li
66.2744 68.1738 66.3809 68.0801 66.5059 68.0801 cv
66.6338 68.0811 66.7393 68.1768 66.7539 68.3018 cv
67.0273 70.6543 li
67.2285 69.3779 li
67.2471 69.2617 67.3447 69.1738 67.4619 69.166 cv
67.584 69.1748 67.6865 69.2363 67.7158 69.3506 cv
68.2031 71.1445 li
68.2393 71.2773 68.1602 71.415 68.0273 71.4512 cv
f
63.5508 100.681 mo
63.5498 100.692 63.54 100.702 63.5283 100.702 cv
63.5215 100.702 63.5166 100.7 63.5127 100.694 cv
63.5 100.681 li
63.5 100.681 63.3633 100.524 63.2617 100.29 cv
63.2266 100.172 63.1455 100.036 63.1318 99.8896 cv
63.1143 99.7437 63.0947 99.5864 63.0762 99.4307 cv
63.0957 99.2744 63.1143 99.1187 63.1328 98.9717 cv
63.1484 98.8257 63.2266 98.6885 63.2617 98.5718 cv
63.3008 98.4536 63.3838 98.3564 63.418 98.2876 cv
63.4629 98.2197 63.5 98.1807 63.5 98.1807 cv
63.5137 98.1655 li
63.5215 98.1587 63.5352 98.1587 63.5439 98.1655 cv
63.5479 98.1694 63.5508 98.1748 63.5508 98.1807 cv
63.5508 98.1807 63.5625 98.8057 63.5752 99.4307 cv
63.5625 100.056 63.5508 100.681 63.5508 100.681 cv
f
64.6543 101.411 mo
64.6543 101.424 64.6426 101.435 64.6299 101.435 cv
64.6211 101.435 64.6143 101.43 64.6104 101.421 cv
64.6035 101.411 li
64.6035 101.411 64.4668 101.163 64.3652 100.792 cv
64.3301 100.606 64.249 100.39 64.2354 100.159 cv
64.2178 99.9258 64.1982 99.6787 64.1797 99.4307 cv
64.1992 99.1826 64.2178 98.9355 64.2363 98.7026 cv
64.252 98.4717 64.3301 98.2544 64.3652 98.0693 cv
64.4043 97.8838 64.4873 97.7285 64.5215 97.6196 cv
64.5664 97.5117 64.6035 97.4507 64.6035 97.4507 cv
64.6113 97.4385 li
64.6172 97.4277 64.6318 97.4238 64.6426 97.4307 cv
64.6504 97.4346 64.6543 97.4424 64.6543 97.4507 cv
64.6543 97.4507 64.666 98.4404 64.6787 99.4307 cv
64.666 100.42 64.6543 101.411 64.6543 101.411 cv
f
66.0371 102.538 mo
66.0371 102.676 65.9248 102.788 65.7871 102.788 cv
65.6494 102.788 65.5371 102.676 65.5371 102.538 cv
65.5371 96.3237 li
65.5371 96.1855 65.6494 96.0737 65.7871 96.0737 cv
65.9248 96.0737 66.0371 96.1855 66.0371 96.3237 cv
66.0371 102.538 li
cp
f
67.3379 100.159 mo
67.3223 100.39 67.2441 100.606 67.209 100.792 cv
67.1709 100.978 67.0879 101.133 67.0527 101.242 cv
67.0078 101.35 66.9707 101.411 66.9707 101.411 cv
66.9629 101.422 li
66.957 101.434 66.9424 101.438 66.9316 101.431 cv
66.9238 101.427 66.9209 101.418 66.9209 101.411 cv
66.9209 101.411 66.9082 100.42 66.8955 99.4307 cv
66.9082 98.4404 66.9209 97.4507 66.9209 97.4507 cv
66.9209 97.4375 66.9316 97.4268 66.9443 97.4268 cv
66.9531 97.4268 66.96 97.4316 66.9639 97.4395 cv
66.9707 97.4507 li
66.9707 97.4507 67.1074 97.6987 67.209 98.0693 cv
67.2441 98.2544 67.3252 98.4717 67.3389 98.7026 cv
67.3564 98.9355 67.376 99.1826 67.3945 99.4307 cv
67.375 99.6787 67.3564 99.9258 67.3379 100.159 cv
f
68.4414 99.8896 mo
68.4258 100.036 68.3477 100.172 68.3125 100.29 cv
68.2734 100.408 68.1904 100.504 68.1563 100.574 cv
68.1113 100.642 68.0742 100.681 68.0742 100.681 cv
68.0605 100.696 li
68.0527 100.703 68.0391 100.703 68.0303 100.696 cv
68.0264 100.691 68.0234 100.687 68.0234 100.681 cv
68.0234 100.681 68.0117 100.056 67.999 99.4307 cv
68.0117 98.8057 68.0234 98.1807 68.0234 98.1807 cv
68.0244 98.1685 68.0342 98.1597 68.0459 98.1597 cv
68.0527 98.1597 68.0576 98.1616 68.0615 98.1665 cv
68.0742 98.1807 li
68.0742 98.1807 68.2109 98.3364 68.3125 98.5718 cv
68.3477 98.6885 68.4287 98.8257 68.4424 98.9717 cv
68.46 99.1187 68.4795 99.2744 68.498 99.4307 cv
68.4785 99.5864 68.46 99.7437 68.4414 99.8896 cv
f
65.5527 82.6543 mo
65.748 82.6543 65.9063 82.8125 65.9063 83.0083 cv
65.9063 83.2051 65.748 83.3633 65.5527 83.3633 cv
65.3574 83.3633 65.1973 83.2051 65.1973 83.0083 cv
65.1973 82.8125 65.3574 82.6543 65.5527 82.6543 cv
f
63.0098 85.7163 mo
62.8291 85.7163 62.6826 85.5703 62.6826 85.3882 cv
62.6826 85.207 62.8291 85.0601 63.0098 85.0601 cv
63.1914 85.0601 63.3389 85.207 63.3389 85.3882 cv
63.3389 85.5703 63.1914 85.7163 63.0098 85.7163 cv
f
63.9102 83.4673 mo
64.1055 83.4673 64.2656 83.625 64.2656 83.8213 cv
64.2656 84.0171 64.1055 84.1753 63.9102 84.1753 cv
63.7148 84.1753 63.5566 84.0171 63.5566 83.8213 cv
63.5566 83.625 63.7148 83.4673 63.9102 83.4673 cv
f
63.9941 87.1772 mo
63.7988 87.1772 63.6406 87.019 63.6406 86.8232 cv
63.6406 86.6274 63.7988 86.4683 63.9941 86.4683 cv
64.1895 86.4683 64.3496 86.6274 64.3496 86.8232 cv
64.3496 87.019 64.1895 87.1772 63.9941 87.1772 cv
f
64.4453 85.6021 mo
64.1973 85.6021 63.9941 85.4014 63.9941 85.1523 cv
63.9941 84.9033 64.1973 84.7021 64.4453 84.7021 cv
64.6934 84.7021 64.8945 84.9033 64.8945 85.1523 cv
64.8945 85.4014 64.6934 85.6021 64.4453 85.6021 cv
f
65.4121 86.5034 mo
65.1641 86.5034 64.9629 86.3013 64.9629 86.0522 cv
64.9629 85.8032 65.1641 85.6021 65.4121 85.6021 cv
65.6602 85.6021 65.8633 85.8032 65.8633 86.0522 cv
65.8633 86.3013 65.6602 86.5034 65.4121 86.5034 cv
f
65.4121 84.2715 mo
65.4121 84.0225 65.6152 83.8213 65.8633 83.8213 cv
66.1113 83.8213 66.3125 84.0225 66.3125 84.2715 cv
66.3125 84.5205 66.1113 84.7212 65.8633 84.7212 cv
65.6152 84.7212 65.4121 84.5205 65.4121 84.2715 cv
f
66.1035 85.6021 mo
66.1035 85.353 66.3047 85.1523 66.5527 85.1523 cv
66.8008 85.1523 67.0039 85.353 67.0039 85.6021 cv
67.0039 85.8511 66.8008 86.0522 66.5527 86.0522 cv
66.3047 86.0522 66.1035 85.8511 66.1035 85.6021 cv
f
66.7637 87.4072 mo
66.5879 87.4072 66.4443 87.2651 66.4443 87.0894 cv
66.4443 86.9121 66.5879 86.7705 66.7637 86.7705 cv
66.9395 86.7705 67.0811 86.9121 67.0811 87.0894 cv
67.0811 87.2651 66.9395 87.4072 66.7637 87.4072 cv
f
67.0996 84.3501 mo
67.0996 84.1543 67.2578 83.9961 67.4531 83.9961 cv
67.6484 83.9961 67.8086 84.1543 67.8086 84.3501 cv
67.8086 84.5474 67.6484 84.7051 67.4531 84.7051 cv
67.2578 84.7051 67.0996 84.5474 67.0996 84.3501 cv
f
67.6641 86.373 mo
67.417 86.373 67.2129 86.1724 67.2129 85.9233 cv
67.2129 85.6743 67.417 85.4722 67.6641 85.4722 cv
67.9121 85.4722 68.1133 85.6743 68.1133 85.9233 cv
68.1133 86.1724 67.9121 86.373 67.6641 86.373 cv
f
68.5645 85.4043 mo
68.3828 85.4043 68.2354 85.2583 68.2354 85.0762 cv
68.2354 84.894 68.3828 84.748 68.5645 84.748 cv
68.7451 84.748 68.8916 84.894 68.8916 85.0762 cv
68.8916 85.2583 68.7451 85.4043 68.5645 85.4043 cv
f
67.6777 57.7627 mo
63.8945 57.7627 li
63.375 57.7627 62.9521 57.3398 62.9521 56.8218 cv
62.9521 56.3267 63.3359 55.9336 63.8184 55.8936 cv
63.7754 55.8125 63.7441 55.7236 63.7441 55.6245 cv
63.7441 55.3057 64.002 55.0454 64.3203 55.0454 cv
64.5176 55.0454 64.6836 55.1514 64.7871 55.3018 cv
65.0684 54.9375 65.5039 54.6987 65.998 54.6987 cv
66.7354 54.6987 67.3506 55.2207 67.4971 55.9136 cv
67.5576 55.9028 67.6133 55.8774 67.6777 55.8774 cv
68.1982 55.8774 68.6221 56.2998 68.6221 56.8218 cv
68.6221 57.3398 68.1982 57.7627 67.6777 57.7627 cv
f
65.7871 116.62 mo
64.248 116.62 62.9961 115.368 62.9961 113.831 cv
62.9961 112.292 64.248 111.042 65.7871 111.042 cv
67.3262 111.042 68.5781 112.292 68.5781 113.831 cv
68.5781 115.368 67.3262 116.62 65.7871 116.62 cv
cp
65.7871 110.542 mo
63.9727 110.542 62.4961 112.017 62.4961 113.831 cv
62.4961 115.644 63.9727 117.12 65.7871 117.12 cv
67.6016 117.12 69.0781 115.644 69.0781 113.831 cv
69.0781 112.017 67.6016 110.542 65.7871 110.542 cv
cp
f
65.7852 115.493 mo
64.8701 115.493 64.125 114.747 64.125 113.831 cv
64.125 112.915 64.8701 112.169 65.7852 112.169 cv
66.7031 112.169 67.4492 112.915 67.4492 113.831 cv
67.4492 114.747 66.7031 115.493 65.7852 115.493 cv
cp
65.7852 111.668 mo
64.5938 111.668 63.625 112.639 63.625 113.831 cv
63.625 115.022 64.5938 115.993 65.7852 115.993 cv
66.9785 115.993 67.9492 115.022 67.9492 113.831 cv
67.9492 112.639 66.9785 111.668 65.7852 111.668 cv
cp
f
65.7852 114.445 mo
65.4482 114.445 65.1738 114.169 65.1738 113.83 cv
65.1738 113.491 65.4482 113.216 65.7852 113.216 cv
66.124 113.216 66.4004 113.491 66.4004 113.83 cv
66.4004 114.169 66.124 114.445 65.7852 114.445 cv
cp
65.7852 112.716 mo
65.1729 112.716 64.6738 113.216 64.6738 113.831 cv
64.6738 114.446 65.1729 114.946 65.7852 114.946 cv
66.4004 114.946 66.9004 114.446 66.9004 113.831 cv
66.9004 113.216 66.4004 112.716 65.7852 112.716 cv
cp
f
66.0371 130.06 mo
66.0371 129.291 li
66.3506 129.186 66.5801 128.896 66.5801 128.547 cv
66.5801 128.108 66.2236 127.754 65.7871 127.754 cv
65.3486 127.754 64.9922 128.108 64.9922 128.547 cv
64.9922 128.896 65.2227 129.186 65.5371 129.291 cv
65.5371 130.06 li
64.4727 129.935 63.6416 129.035 63.6416 127.938 cv
63.6416 126.756 64.6035 125.793 65.7871 125.793 cv
66.9707 125.793 67.9336 126.756 67.9336 127.938 cv
67.9336 129.035 67.1016 129.935 66.0371 130.06 cv
cp
65.7871 128.842 mo
65.624 128.842 65.4922 128.709 65.4922 128.547 cv
65.4922 128.385 65.624 128.254 65.7871 128.254 cv
65.9482 128.254 66.0801 128.385 66.0801 128.547 cv
66.0801 128.709 65.9482 128.842 65.7871 128.842 cv
cp
68.4336 127.938 mo
68.4336 126.479 67.2461 125.293 65.7871 125.293 cv
64.3281 125.293 63.1406 126.479 63.1406 127.938 cv
63.1406 128.57 63.373 129.146 63.7461 129.602 cv
63.7461 131.168 li
64.2461 131.168 li
64.2461 130.081 li
64.6162 130.347 65.0586 130.513 65.5371 130.559 cv
65.5371 131.168 li
66.0371 131.168 li
66.0371 130.559 li
66.5605 130.509 67.0361 130.311 67.4258 130 cv
67.4258 131.168 li
67.9258 131.168 li
67.9258 129.525 li
67.8916 129.525 li
68.2266 129.082 68.4336 128.535 68.4336 127.938 cv
cp
f
65.8398 142.876 mo
64.7598 142.876 64.1816 142.583 64.1416 142.484 cv
64.1416 142.482 li
64.1836 142.367 64.7461 142.079 65.8398 142.079 cv
66.9355 142.079 67.498 142.367 67.5381 142.469 cv
67.5 142.582 66.9209 142.876 65.8398 142.876 cv
cp
65.8398 144.758 mo
64.7568 144.758 64.1777 144.465 64.1416 144.358 cv
64.1416 143.068 li
64.5713 143.274 65.2168 143.375 65.8398 143.375 cv
66.4619 143.375 67.1064 143.274 67.5361 143.068 cv
67.5371 144.354 li
67.499 144.469 66.9385 144.758 65.8398 144.758 cv
cp
68.0361 142.477 mo
68.0361 141.859 66.8975 141.579 65.8398 141.579 cv
64.7813 141.579 63.6406 141.859 63.6406 142.477 cv
63.6406 144.359 li
63.6406 144.977 64.7813 145.258 65.8398 145.258 cv
66.8975 145.258 68.0361 144.977 68.0361 144.359 cv
68.0361 142.693 li
67.9844 142.693 li
68.0186 142.626 68.0361 142.553 68.0361 142.477 cv
cp
f
64.3643 141.154 mo
64.1846 141.154 64.0381 141.009 64.0381 140.828 cv
64.0381 140.648 64.1846 140.503 64.3643 140.503 cv
64.5439 140.503 64.6904 140.648 64.6904 140.828 cv
64.6904 141.009 64.5439 141.154 64.3643 141.154 cv
cp
65.1396 140.579 mo
65.0322 140.248 64.7305 140.003 64.3643 140.003 cv
63.9092 140.003 63.5381 140.374 63.5381 140.829 cv
63.5381 141.283 63.9092 141.654 64.3643 141.654 cv
64.7305 141.654 65.0322 141.41 65.1396 141.079 cv
67.9443 141.079 li
67.9443 140.579 li
65.1396 140.579 li
cp
f
64.1719 156.3 mo
64.3008 156.181 64.4238 156.053 64.5449 155.926 cv
64.9229 155.53 65.2803 155.155 65.7871 155.155 cv
66.2939 155.155 66.6514 155.53 67.0303 155.926 cv
67.1514 156.053 67.2744 156.181 67.4033 156.3 cv
64.1719 156.3 li
cp
68.5127 156.299 mo
68.0781 156.299 67.7598 155.967 67.3926 155.581 cv
66.9775 155.147 66.5078 154.655 65.7871 154.655 cv
65.0654 154.655 64.5967 155.148 64.1836 155.581 cv
63.8154 155.967 63.4971 156.299 63.0635 156.299 cv
62.9541 156.299 li
62.9541 156.799 li
68.6221 156.799 li
68.6221 156.299 li
68.5127 156.299 li
cp
f
67.0293 158.136 mo
66.6514 158.534 66.2939 158.907 65.7871 158.907 cv
65.2803 158.907 64.9229 158.534 64.5439 158.136 cv
64.4229 158.009 64.2998 157.881 64.1709 157.762 cv
67.4023 157.762 li
67.2734 157.881 67.1504 158.009 67.0293 158.136 cv
cp
62.9521 157.262 mo
62.9521 157.762 li
63.0615 157.762 li
63.4961 157.762 63.8145 158.096 64.1836 158.482 cv
64.5967 158.916 65.0664 159.407 65.7871 159.407 cv
66.5088 159.407 66.9775 158.915 67.3926 158.482 cv
67.7588 158.096 68.0771 157.762 68.5107 157.762 cv
68.5107 157.262 li
62.9521 157.262 li
cp
f
105.548 180.331 mo
105.424 180.499 105.189 180.532 105.023 180.413 cv
102.002 178.218 li
102.002 180.142 li
102.002 180.349 101.834 180.517 101.627 180.517 cv
101.42 180.517 101.252 180.349 101.252 180.142 cv
101.252 176.745 li
105.465 179.806 li
105.632 179.929 105.669 180.163 105.548 180.331 cv
f
13.3584 179.185 mo
10.7051 179.185 li
10.7041 177.917 li
10.7095 177.866 10.8521 176.667 12.0742 176.667 cv
13.2451 176.667 13.3501 177.774 13.3584 177.878 cv
13.3584 179.185 li
cp
14.1074 177.856 mo
14.0713 177.187 13.5991 175.917 12.0742 175.917 cv
10.5645 175.917 10.0303 177.173 9.95654 177.878 cv
9.95654 179.935 li
10.8716 179.935 li
10.8716 181.345 li
11.6216 181.345 li
11.6216 179.935 li
12.4434 179.935 li
12.4434 181.345 li
13.1934 181.345 li
13.1934 179.935 li
14.1084 179.935 li
14.1074 177.856 li
cp
f
.566929 lw
18.8223 134.932 mo
18.8223 134.932 8.77832 158.119 28.7939 178.631 cv
48.8096 199.143 32.4629 237.732 16.3022 252 cv
0 0 0 rgb
@
95.3682 134.932 mo
95.3682 134.932 105.412 158.119 85.3965 178.631 cv
65.3809 199.143 81.7275 237.732 97.8887 252 cv
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 16.0
%%AI8_CreatorVersion: 16.0.0
%%For: (Raf Wlodarczyk) ()
%%Title: (beehive work.eps)
%%CreationDate: 9/30/2018 8:00 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb!R&B6Q,CZ7n81moo]$"IgCBaiTniChte5%+katRUDj/Gg>/if"AbG,^!!DSI#,<SpU/lIXkI#WCj!b<N/U%]?>"#lg]?cc#!B:
%)17!k_++\<rfH"K$qG78lgCo4Y>[Ms,EFKCpg?aUcgQM2I@bC3)?K:p4Q0*r"CKAi7Y__dhUgu9Lt_7%S)oC]`=1G7#A_6K?j`J6
%$ls)nh#,3S=Umn/n4pP7lkeeWWj&0uK=uj.GmO$ml0DsloB#c/YSpD]bRf[,d-prtK)2nXhuI<_)>tWEQWN+C#.<?@:'7:'b[%oL
%_>=:_7K;%)lI9pigXCfRI'`gXF-,Y2Fu>p/4,.-mKLDp3pqmNR+Yr%EoS.`:p6?u4g+EVW$?=0`"?f&'58o-'L!O"&5UC/7L;=Ng
%B[@<LqSD'.K]!dU*2NSXWW0mF-#,-2BU2M0HJb+i2kZWK":0VTb<DpJQ5';+T'p+Nd;Mm:;pUpf[01CR+:?9m@M&Bs'`PBiRKIk.
%m=>CVQ3YL&Qm'=V!M`L0r(Y!n-!;MD/[]J6>,\cFT8tZ/,6:&ocTjrd5!p#TQ7mo16k(CZB!F*.8`hZ6)ZkV!3!<YLJ2K$X<I-j"
%Y@CfJ_u1cB*t&/k#,hh$0;?>t_>bU:L80=[%rC\80D9a-c&i+(0)LUL&E.nP^i&5bj6U@]#A+4UAq9NTJRC&g;td3["[)r1%U55O
%oL&Xi"(%@u+lJjiH=<C6qR,Dc4=npM_m[4LCi96qQ6't!PbCO*p)=nYp"3(]rdZYFK+5r3Th,ba!!`5D\+'mh>It))5UT8DR&AkJ
%oG.9cJcG"\5=\G`";Lnj^ZO-tW9%WL!TnkLXN-(i!PR"c]XAf]#IFLpi*f^LJ&%6K@$q"#pe;Q,+@]SN,kM^a,=/$O!.1LLeR1TD
%.ZIVmG<C!0X/,@2O*X&Lra$$mbP?%p"2o]J5O7[lStaie2:G:rYaZN!S'=i="OhmL,RcHABAWI9+Q49_+TN&Q]tgt,j`3P]#M[pZ
%,R7]=3KH_i?!U>b6<okp."9)Z4+?5IKSL58r-/^9T>Is9D:A:+?pC(\oeN<JoUO?sMf<ngo/0X%%?88Q:C6'h=`'jdA8'0k>PL!j
%=hn2JE.`SC5i<$#gTA"CpmGbG.5?GafE8b]QuZ!bb9[-=rbh4NU.!?Ek5Pm;aC*Z`kPbW-qh--;r6tWUr:e!S+kbterAX?H&UaQY
%^]"J@VU(!X0>]EW6#Y:^""BfVr/j@drE-mcjSl:>YKQnnH@=%[#9bCDTh5#E:HbCj1_fJT%tr9l"!=6?)%(=>U]m37!_j^XTI+&k
%L1GOb0G,HN./(PNYm57(msDkjccnu,$l[KB)e/<GJAGFoMit3i.e_9J2ueU6i.B;7n.1/:73LS(pP"*C"\`i,Dt>QT#+OGqI_Y]^
%4=aU^?=<t0>LqTAq=5%b91=m<q1$$;O^OO^58pb>,T;7V,!dt(@dM<X,iC%]5+F3]^t8)O_Ee:umklDRK.0.ZmukV12!$ad7%%]7
%S_F+WUju2.I9LRgZUWh[T5>[ci#Nf'q_,Rtq_D8NOAp..%\,\>DaYGBn.4^._#N*jp^<1S;fn=M/h"pHAf`'7A'bt10F!InGX5-a
%#=K>8"\+_7GA;aVE-<XaN7q*X^SMu.i^!CU+m5Z(F_u6->]C/sq#<N35P3.'Q+eCDL"ASf!Y[C/KNZJ(I,_\VReTh^\K[.r*Xnpf
%RF4\?bX9D4LS4W"mWSY)qPt55[aSK3+ZJ$ad!Xr(@&Br*3d8:)kK:t[9IW)a)f1#+Q>=j_%H]B.+!1.*N`?KQ(!qU5;(u(gK!cQB
%k0#JRXk?`=<Y'53iLdfV$>l+%Y5`-"n)?TL1]W:'<8@2n@!UZL_Zr8WL23H'3;mUM>.X\lZ"c6giC-WTVZ9@/eG]XA6jL?nk,s1;
%Z0TY<WTt`pQ^cBS)XAT1CO/^K\==/,3[=9VomAGu;S$IpT$dN:I.0p5$F)hleH0RamgsM1kNK/)DcZl>p%ON)BP]VXQ69F"JYLOF
%WW*Y'#'B(det;tJ;gC=tcbD`Zs*p]`GK]gGIubKq6[mr'H0`sfWC$38RSRS--6V4<?_P,(1>iJ%d>0-#s-\rB1L9XX/cQRHZ2<.K
%-@(+*S$;o*ZJ=DX1oO!phn!Ltqd2Z'(o,;eUINRKZNiBXKpq@rSRGgb*P_6M0di'SChsURLdFZLrsjAW/9CiKI]TLH?jmIG.s*+a
%EG*L*2HlhJk-3G#-\B;Jo1[Rh2+XM@A\#cc3pRuc561:Pr%Jp3M@rh6XKQL'lTOOF%4-O\A=GrQS+!f/_;EQ@HGS!kVYA!QJ0#Z&
%qu*spO$MS_H8*+%f9`meSc+DkKAdGQKRVFMATLd_]"ms;[b8nK*U'a=e&<`CL<ZOA%tTtFM"6QNKT3[Ya@QKc"u2M*[Zn]/&4c&0
%0HLTAA.YjI]7gspDS+RpgC9Hi:4%XS4ZD6C4m[)l(k&bodXmj^bD,Xt^G44C]0-<23i#U$AWelhZ=I(=J`jd.ljZm*7oQPWI(+[[
%8VSB^4$[L)dah:5G-IfV_f!1L/5aVl136lf!@KKEQr,-Vj06@k*isS?!LRVs^HoWs@fVRf,NoO1,)X_U51$oom^?&_iodX[A"!pi
%KRuL>:q8$3pHc,;h?V<F66B;;P&8@\?*f1VT>@ZRY_s2)AW<R1'`EeB1o\7`BM3\+S1j&P:69<7cd[2g=;cdFXfpbFNBm#r?Bh!k
%?rN]5fHVA_"$Z7-"?.>D;:!a0`eu2W&e#eY(^SM>e\chDA5qS8JnN,Ds!iZooDhg]C7?e.k=>-pp4&R[li3hV0iNA,!G_j%*uP:#
%bob*h1?F;?p%6RL@#>PfE$XY.7_fQHk^P3`n^$)kp`Ms/"6!p\LiO%&rBG)mJ.V_k4kKct&J'+uqL=Nnr:\jE'jlaNQc63,L]3FF
%,-XNie?ng[10&6on9&)gZn9g4FaXG+'fU?Ia(]iS/IZ:AQ>XC92!M0B^Le_'#pY72S*G;drt`'/^H!$:Mg.c'U!/AF5MKn?VC#[Z
%"EfJaj=l.1*"6nhA(0=R;=mVF&fV^?4NH%.7Cl_`/=2mFYg(!_:)JE<&-i_=jar>ArAo&4MV&Uie/Dr[on%#73^;/Kkp+re\fH`_
%.3&Vn2D,D-<-g]5;OYk(FaMV!U=^3JC^ITXb_,k%4lTe(OAXF>1dhBGplEqIOMY\t#Q4/:M[cZag1[^d1tW>&=ZLXT'7j8Ms(a8i
%=XoCSK1'PY_+6PYJA8>DChR'Ke:\/d`ahNEXWCV2%E5X4$c-(bH+8qs]YD8g:j=I,-).Ni;GUqfCF/8H#$mG7NoFV>;5U\LEg[);
%&_GI7#SjedQ;O8p=%b5aG-`g[!>qF1q,j?nDI\A/'7T`sXS6c<Yl"\eR>(jq&/]9-q3j)*p@Mr_l#"*=$bt-T-Wpote?Up`"0Di"
%U$-N7-Sfr^g/^+>1;^G+e/E8QKQ17QRN!g[>IX,TdqH.5s$<'pL>cNsknR*IbgCIF"i_16VuHpZV(!O*Vt%oqZ\cIQ:N,2M2fEen
%8Yj!9*N#ZeTZFPGlhPE&e0(p2:=Fb*$qt(6hE-ZNa8cQ;:BT,%CiLjq)No$rRd]Bt<=&9&Q=<;3mu6up&$rni;h#PEoM2HFdWZVZ
%BX?ic8N7VVD"a'd;n)oW\k%`L6K&SI*N^/[(j6&F.cW-HdQ-g6$h>MJPL/qX<e,A3=i0),Ed#,7":D`#IjcRFZE1HR?9dqc)8ABQ
%%>QZr%VD$C\4C6'=1cA``#7M<mXsR(BYfL2n:q&d?]^3NrUQUM.c3^i@]#7E(QiY7N^^24O9qZk4f64S]%Gqhg$H](\WsW*F<VNP
%.-K*n2U#Iu):E(r(JVO\_&*5YL=1#Y&fc=)K-H+SW,8lB[]M&p>L^+(/jKlbj\"%(.BHHV_'<RG0Q*PM.9SB9U^MgRD,mUc[@'H%
%o!QIDgk)Z9fYtYUaY0Nr2T*K#'KF)hd`F6[U6K:9*oU7?KU't>?_c-e`msk2UP:0)]_2[uEpq=dkh-%;S-FGRZsuVn+R6d@lCU\<
%m2#<\&.lF7kW`cCRKDR:.+gslUZlHu>RHA9G3l8%?f1uFVi\m2K5KVR_&LJca3>/r',WD28rM`(r)8jj6g?'&8K>-$lKrK(oSaZL
%W7*ld1cPQo@pd#\gNm2[N`Y0/Eim)`gTc4s9V.+1MVR]>[kui7V$!q6gB#S9!c!O6*2F&6/^866Z'f9<Q]*=MS&9hAcOuU&>Z4(I
%9[irp$\JVX!VN<Heq:3b&Bd"Ep;T)S"3CYfBl"XcD91+GP[^[O)A(+rUhGfdNMOcsDC+;5$Et!-5,s-s[Q>*%e-s="2)NFBg<HO2
%4@JU9;[Ys9.o-m,C:TbVO+JPGRV"LKmoP.DIUsiIQt+j:Zj4lSN@)GO#@aom)]i_s_5@,k1PGGWS,iCrS'tjXE5Z0^\4f:mg2[61
%in9(cDf,V)1u#>57B1rj&5PIS_T4XpZKk%JZ.TTkZZp/P%KC*<\f5LQUVBf.(=Qs(5'"B5NV:.B_"W3jW!#Jr*,Kc%K5IPV^im:m
%Gc3J.(oXHHfPCdKj7UMLC<u*aCpN8M$-\#"HnW\si#]rh6eE0U"4/Za-n>&<!s5kZ*7:7X<Z>^=c%1/5eW.Yl.Q$\4]r0h>hPgs`
%5R,StpbJY?ocC#(X"h=(KbU#OK,5drdEu.]M2oT#:ZQ-=AA._rQPpd)Bsa]aS$f7WK^Er<+[8WuEhg#EjSkk&lse=P3/<6_g7[ms
%CMGoGZ3_4K6-CAF7QV%sJdoQ-[+9c9,U'gO&=Sk#L7Ms9K83Q*C>=ECW'-+0X[2siI`TBi1^hL/#(LJQiW,dHOM_HpdBn""&oE-@
%24YdG<G9H+R98fVDJY#]9Lr9\.9HZ%Z,0'(5jZoK[+oIfC)R>bfVo<EC,%oN]BC`e)8*.]S,a@AVdh/AbpJ5=853]`7VmI&QQ(qW
%"2-NnYPC!cGs<-'e+>Fc/)8RY]m1M;_`K_4A2h:c*?.1ZNV@2Tdr+s@e+!-5^_Xj?7QD\-1kI>!^*b;_L^U#><e%0\gfVbEI\u@M
%1IeD"9[R#m7#m'5I4f7fX#ri/%m)8M).h`-Gu$TJ]nuXOGl/m:,Uq7*Io4B-78G=??Ne]D@"MNMH8((#/ijMs8Y]*VS7(3R^uu=l
%E<<k.&jME5''!Gq5URdd?IOHW*#=>%*]HGRFUK/T%+q/@2`'V`)X0`">`Jr.'GP*M2"4>LHoMf.pX],4m<\D/WpWQ<0!8fkl.Yo7
%0Y2)Om!RaEh1jcYq2dV&H7L>7!tVZZVtE&=+%G3UhY/##,6Is&60rVV\Z(Ls9uVH#7k3KOmS^YET,4.l`@FEHC\>3`9M;RS<$FRb
%ZLdtS.-L,&Van6Hisn<kc5#bViGNY-qt\A;\o(Sq[AiN@ji2c39SUcH68!6ST(uMmhZ92$KQnKZ6G![s-fNYBa(MuOosBsgipC2^
%WPkP#Q&=rk.qd.MG:;+$is@u'pf7+W<tDj`f6]K`9J,#(8S5EWcGEjb`0"t2DF@NS;i(bF3s,b1HC+"nHQ2Irns_.jbJoK&noL:<
%\BSfd'CEUQf&K8MCsGn,'R[<"B7YLoOhUEkS=(2F[kj;W^(ms'_3&OsRV20<BX!#Zk0En#11O.EKQe!)kI9?RH1,aC=l);Dh6ceF
%OKLDk^Q8GB.fMD[7fe;&Xfk]M4gM5\pWmhtGkH>H%u7j1M*F^qb+s(j,C,BGguGO@3#B#$iHIL@Nm4oe!>oA<q;17W;42"*[UNq6
%<:3Z;El.aGG=@.gloA/H#apn8m&&r>[)O1BhpD:Ti$R'"J>?_s@>;\j&UFu$Xs'j/R>!fbAd,P!Xq9Z\q)RUY,V0+oZV*YB+o%^c
%TV*V3%5B])"6bY!=\,ch'(>WDVL@$\s(7r"3kdA2i&9Of-M&ismU:Ff!d_UW`5b(q4Z&UTNrcn.-HMk]XYPrb(VYPTOLG$ICdeNS
%Da@k[f152Q;7hTKW#PRNV45";B5Z^WqTTNTf%Wl3q">W.h6l.geSM+KRl'9BWSalr4LcjSkVW/F6bB%32r?!RX\>CYXql%Bn,;VN
%-fg7_<d3"ZG2aVF&!Po0E.,A2&4RSQX/C'Iicls6m,KIJ3ukGl.0)eE^\,6#+'O;(L88?.1.]BRHW.NO\3CrH-XeXI$#VHN[#kI@
%!&LRBKpu';meC\bqbB97Lr*fIO5qGRSLEQLN&Y(fbU2&-NgH-Dpu$1F_2-FTCj/-lK%/_[HE7h0rC7LB9u=H#Ihupb-Vp1%1qPsK
%D(i`t7*Le?TcU$;2Ts[CSV??e]X-TH#kA>b6"bh79d;lWJslbICLmObRI/\l/ADS57rS'B\EeL.N^KqUCl*\3MKu[H(mQ&+k^n-'
%!]90(o@OA69er0\<&tDtrh?8l]4*-M!L"o",CIJGo<J)WCB]'%))('&?(WoUr._WC!bm1fdA2lM"iHai]@oT_a$Z.r/qc+FrSBRj
%5Pst#ZWsstl/o'q$Xc(WGlZU3C\-O9=PVkrFF>pNK%I^fR?4a1@o]Ei2mJZ8TYHs6UD!1#G)=]3!5m8edpGX?n(U[rJ*2Q;fmES_
%DR:(dZ_Zp3O(IBbktWAg-EIRdNR2))80fqugNHmo'M07@lFV2Z!+u[A>;4T%'#R)nG5qFlX?;ZD:nV\&n.]u+C)f*eHopBMh#us1
%OZAdP&'L#Uj81RS5)lGS;i+E'".FVHJ3Ko611^.+:H&d.JFF71L,oeAZ:`N>R"ZD5I%kpKM2,hh*=b:Cbf&Q@,=O`J<dF1IS0=KF
%ELQ^qfX[&p:[KG&D32Va,GuFO#"4)&*O'HGfqqp?bocGs*j%.MZ*/3c(dJM:D#q"jW.Rl13Mm,;Gfui?3s]'LJ.S/L:'q*h56&X_
%@[pr?_t49/%RC,d5\M!,&P1P+H`"XW`^3%7+Z/\2.@9g)9<hM1/9_(VL74/.m.JDI2$$mo4b,a=Bq1Xu^TEj^(n#WfR)#r5COP07
%o[3e^+WBlaacGniK-;*=!KGE-jS/nib-q=@Ei]mnKP;f]AV:8E%n(j$#pj?Y$k&e\q8@hpT8L?Lfg'&B+<E#<d5=sD\cd:=jqi>o
%d)ba8+Vukcis8+3Cb3b2,TmrS/.Vo]8I5VTYm>UlipL3\Pp,oI.DcGN0j*1%B&3e\-6??FI1R[Q*\]s!b-3Z8^'<a$/uf3/%m)\R
%_5ZeP'H4p_2FAH2C&I0&0/<'<RQX:\dBKhX1JC/W)Ig12Wn\si&gW.(ebU`'#p&8BlY0Wq=fEb;""$3ZrJ7?&@.g$j$K'1#=Ma4j
%^h&LuL9V"s!P!'!4d0*GhT]ufm(CqGj[Y59$a[9M2F_Xm;g*A(>K$>tg`>U\M*2p0e_JYkIpd*0>1rm(/:&LiN%h/5<a.CB44LmQ
%Vl/D\:/[rbV<dGP2:^p<6YP7-;_(b)`edrYfF+tN-f!U5NV'4%AH)XiC29:\\XMAKaQ7JQXsKJR:32XE?P6$bA3`:!U&o78lg-E*
%`On:fZ2jkSFF^.0_IgZPD+=T[!UuP)j*e([VI@N<!<m<8@.t;s7>L&X%&aQ)(EK(TB+FKalA!53NjZqqmO\PP-F39j-$C9bmM;nW
%e:,Ua$Wg`$!:#')j+7,FcJpC&k+4=O/&5O7AmSCXNm-hFf,g@&`++o<bHM=t<KQi#6Vj:Yq'S993!UH7a?4VOdd'f@[B)46e[HnK
%p0a=E1+Moaald&6RLFlir&cB>QD*OJndPR;_*'dG.TO_.(O$R\B<MUYrYU2^Y'k;*)FgLIGi2"!\"_fu,cn)Q.Ae'-PS:\nr?Xu,
%LT3$#ArO%`CstZNIOtU>_#[ne@F!.^NA8f?I\.:)0+T2X"1:C+na$C=8o54!-V=gD%DC!&GAe0:n1meX`iCBdL[%at8V]'T7/kZQ
%6O=QT?Oh-#^HTHtl+;kV,)go[DS7-Sn>PoFH**oX5'pr8_KPV!\P']O1g86Pk8q;9pfTLn/4=`&(tOMcf!?pqWY@$NbtUt?p1pE-
%BR%WMUhG)J(5P,g59LASiZ\:1*Pa3\M.XpJnEMo1aoi1lJon]nN1t=ekbY'E-TD'u)>NmKdu:c%GGT!%A#\Cj])k6?]`SM\2-tps
%Wa7+GmD^$>eXoGBHgB2YX4%]N3?*%D)Ff4<\7<,H.+D+7k8n?X2_/U_Eb!<@RATmU(.$D.NI@M-"YGQZAtq5IrBd#PI2ZTYJ^YH\
%Mjm:]^70mSpqcn0N/IOO<WZ/h1]W1*C'9GT2i[cH1&J=G9k%YOp]@jR]i3[`T/u&#)9_oTQZ6oUMRkbZ[$cG+s$5YN,r;ke\MqO(
%LC"eOdC/fH@#Xrj:b8Y>2/d*kWKR<q@uY::J;1o9neV&DpNq*+T_hYtl8R1unOqMnQTh'p6aq8i)::3EK;SI<[lYC12Fr=I+;^YU
%_CJPu5_\*f[ghkRc85tXr-9dLWt,$B@YmJ.1U6+5:?"&MYXMoM.X[:2p&U*/Db_T"hCQ5.CAs>%[b@>FX.qRIf:1%eS2YZ2YAe)>
%NbR:!@2>5WDm'"8EBjo-Ng]rRSS6)e5LQpo2@=l=V3@AKQ=ZAE>?C7?B"&qI8'h=Y]U7P-J7M&Bn]>WX-A+/UQIYgamrX40pj*1c
%CYR2-;Q\^PSk!&e_`Tf2p6>]$$8]Mqa";UL2%o#3@Y0<M0=`L6qtr7<`9,Y&B41&9dY1r(jH(T]e1TqfB]<BgO&*/a/P#SI'X(,t
%`2T>VJ`:RPQYCi=GAXo::m41#h$=e1MQ=G.$JYOKb2u6\bWE&;4O4l9jrr5,Am_jG#Dmu8HQTWb".7TQFYM7C?d*=s5nP0RiHKN5
%,hbJF)$^\>W)',6IGqZ"a=So._*DT;Z=c)X-B7IgG&Fl#!r3=*e*COi,:?#qCnU,p2kt6^H/^.!eQDf"(!g]9Z^gDe_NpqPd0%nF
%WH@oNr0!O;^V0Fq[C8\/)Z?A39jeA$3pFnjl@;PAM[XMmTs((TpHc80b*]+QmmDOa.>]\*q.;Z-XWr1uT:<L]i$-EZ%CX"tF!7%P
%RMN3.Bt\V8:R9I,mij@@,jk@u[@62C+d(Mhh#ViTCeD\'WG*ifV>D[*.>&u9ZTHNY!ElGIo[:n7Ipsg_ipqBV9SSHO\DI.,iuNTU
%r'5&[G;-u8$=r5<P%m^[#7Pi4oQ\H&l=5#fp@>Q*/9gT]));rX=a'+cT=;RL+5DapXMB-1)?T6Q4/7,Z*4r0McB2#tO=U!I]:<Y=
%a=$>`GAf_j4271`2&SLlRTC/)c5'\r5fH;6:jR[S@)Fk8\OhthrZEpu@8jGDqt_r%'oYp;g>(HG-6(Y`,I^OSN_\t\F/WBc:*0>M
%1ueEPBJG0Kpm*YJ$FfDp3T1>uB";CANWOAo1rMe"8$23>LDqo!b2[^0J:9h%dEYUG*crY;:;KH][u("mRlqC[j6scc.fQ6EAB#.m
%nV9O_OkcDq8]b+*i7$>:0p:2"\tS1h+J0.TT3e56+D&om<iE(4K!-W88=9gMFab$0"4V4L?%u_;FL^jG!9;G*V)RXq9`Y^]r_l2k
%L(+u"`&.2SoRjQZBeenAZ6JOGa$sbEn8Wea&#ODhSL/^pKi]C#haDqCTnBmTC&?(2G&<nG(Lj2>fL[[Bp*43j3:@s$Nu3Mb1A$i7
%L/YS&dpP+&6Z?Z^lo78\;3/78$(@b,O&\</lpPHrgjVooHq_tmV0nXP&d^(+hm4Fmb_,P.5f#Sm1Yh=?de-=GT6""^a.*1<3:P`>
%XZ$NF,sO/=^4<+kU^Quh]d1!NIS9>@Ei7r]Q,Ng;qk&sX,0<pjcTm!C4_VVS)APUargn=7X\Q[LSm/=&neoZlVd"\_i/pA9d.#]F
%;i,)%NZ71[BFX&0#j:bsp*CgZ7LP/2\a)]g70usAV!?h1C@=Cuk/BD@`tGJUbI&hlQei9MR%\(@gn*ZWOlC6h2q$LcgS;BG-/Vb8
%3#/d$!7c3RN]R!J6KTTBcjq?nX?$mVaDa5[<X>LM]<?i"0EO1$HublnW?U1YEaJ)AIZG@<%ZGH+P0jIf`Z'UuC'oX-EG1B?`AiN5
%A&J];,s28IHM7Fb-1RLC\5H^NVN/%i%?f-:k[<\R,ArPKRYi8FOFd(=9k=BanMo$EqeAR:&(sj(p+\Hk(X/+9]_ZucVl,3)hfkC#
%#48e7^lhL4^YXK0)LcfA51f6/./iQ8/AmZg]"STeMcB8?S_DcOVVKXq+%X.,Z^'"B>S9<()fG?[khu8k3I@Bf#",8@lgQnF-%?q\
%i$LI5$]2`V'hVe6nS3q[:TR=GYs(\&ik/'@9f\Gs!.+4$%6):r">nZ<[lq23&WMdjULq_/E7?X92q]aj]BqHmRsdb^s"R5SHG`,/
%qs,qg)&u]<4Ls(HAcN8E52ZQ)d[M,:M:_\97fU`!?4Wqq?I+Hnp3\Bt.UmZB,.K44fCf])LRgN"ia*/4;c_?'e'5@@;d`sSOnu$W
%i`GTC0IPrRpH)K`[_sdm,[Ro]+;ODs@nee$Nk'@uE-7a-l%lAKiE><))Dl5T4%Y;+g]4UV?QRj%R8LQl<.b"MdgkGl:Xl:D'3Hc`
%O8.X]o)i9'DuSq&OH4;Aq-JFA#'>p<,LcWRoN(qc@?jQ`n>Q]+@,K!`q,,3SbWOYIoC0?hl9l,o1lVA?Ck:c$'hJ"72t-0&VO>63
%hi3K.]]Y`\S%5(7o_UIi\-F(^%<u4d;N-]mijad8Af+b-kJ$(!1F@!%+QWNS2/&fh_uH0rV8hq.H's)IQiVm/p![0M4_5gVChd8-
%#%N34Jf`oo`#SWP_>LO*%gm&LKXqPNM:*50]")3@2i>I*aHQ<2@rZlCQ61MS\C0[JA$,6;qsqQpnX4_\:'dPG*:SD1?ETUZTih2/
%#cOF(XR-8rNn#)0":Pi/qp,a+I,]/F:sAj6.r-RNm5spcc7#'.:)B9jc!>d_/-/RcQL/P]/cTf0S\@He)YC-7A,;d'\iC_s@5%XV
%;Fj4jkLSbA_08Sq.!rL%Y/$@4_U=/JdnX(-N.VZX"u;U*8&qm9#=f#U*OV;Pr_o8Hp"#)U50D(1!>R/%BYt#(N,i'uO@[0CIZkgh
%\&.rE.P2V:_0S5:q$P%%%'\(Yn&3u,-j*ZRB\9RKru(elUXk1Ui",26?u<\NJZ6,5_%-GqN!OXcR`Fp+6Qj3P0sJDO#K(]k?J;Ii
%e9DIq+Ogh0l!V5[Q+7_UQN85h?X6T\Z24t50qo(t<5q!R/-g[BKAZ_CQLb]0`7F?1R_eEWf/Zg6-@fO/XTqM:!VC7c&^\jJL;S<<
%00o'+%hQcU!.%&Z[kal#8Qq=^2.)lThDTm,Zh_-m^nQ";3F47aS1cF.SAE[.[@9,*Md/YelWR;Hia.P#D%nFPQX?'/97saOkc2sf
%W8^=PD4R-4ZQSotD:8"jhH"JUZ>=ALRasi1@BeM$;aYe]K9#3>S0eJ:[6^/&6E,YgU:()CcP=I@<e6c[5`L/>#hRtsc$D17d@1l9
%"7q1+s8=o+>AZ(I%!l`Ik8?FE*Gh-"rT8K]N6eCeN%imN2pfO:BmAd2CAEb(gF!RVH1u$eeh^6_OS=AjeXRX\_t@EOjN*Q9M8I4<
%W&4$QL\fL6HNV[Q0=i[b`H%:#XN.8sZoeQ`2P84d<m*"D3ToKK=[*?$d*P%b#!,K`OEj2MXjl2nifHSD9Y46[A'$4(7pmt5Hr2_W
%dNa&o*:0)oK%78g`fXF3fQ8.g-24/!_-f<cW?$a/<*39u5+kjN]"Z'C:G;:uPs%JU4;/!gY1i"Yr`Tss>S\uu<d_)j(]kt:c$E`P
%Uo;fWnMU_8-D1A24'95rZ_80Qbu,h+=.AJ$WJ^/p[H_9;ho+mgK`YoOMZ,4gB0g+OU!l6a44m\\!F8?0<[]oGQAU4Xnc[iN>MDnX
%UG9Eq?q>-sU'H1c/)%rinZ"LfaEp&YY]WPGO$$e!(Oc)8fk\=sjcc!XnZ07SM3`l0prP-7B/!<]-ItUCh[qh_8@4l]+UPph#L=55
%Q0#\VM9In^7<GN$ph34d;6H=NO:-Mj\d4n6.!'V=Ga_tA"Y+W200B7u)9p.Ng5L4cT1p[gTN4G<N$(89o1Jo4bm2!A.58'E)+c+I
%#bF]g7+$&=@A+fbrUhlU+Lt4oPn*R&7Qp3ON[';rThgYCUYH>KPdE`fg_fs_Sq4(/#Juil3d0aI%Y<Gp.Co9daq&P@+s_khGk595
%Yje:Gb8Hkmi-3iLcl.3:YOgH7I$j="n<5MeG`DOp#I"%QoH<ROB^R[e8[PuURHsSL\07=%TDG)Pp!CorpQt<-DQade6l;K:7D`_f
%ksgZ8fc3-OSp64>6`a^<4h#K%2t?5Z]_<Ec_B1UHmB;)3DtaZdQWjS6Wo$Bt-K:)>\tN+?V$E]%RdcOiodO#>6ds0S@G8,;Gt^@i
%GKEB)na7iB\q*nRrp19.DP>N1go'U2Ua$mdZY99GV\+^XgCSci*AG'.]s?$+ECYu5Of&6EMSS-?7TY'Z1tq,NV:!$'bTUtLS@F*M
%%R4Mi:Hm6`OCY_?q]h1*2^onM46)YbkHcL03Ct`^G8D_)*mCH%pf^o8@nS2i&Q7<0FF;]75F7K[_Ad/BHkf`ehRmY$;m/(u6o295
%L`'3$nE@'W,N\Gs+pVbdBXA%tJZo>:ou:/ACQJJ[cPdFt4>i8\rHIb_YpEqcp-RT('%W4k3V7LVYpPDO4*.HTo%.HpID**:A(co5
%3NUO$.$.9@)D[ddh3Xc;.mek"#<H.bO9nouZ'l"aOk[9.?B`9!'IKT<,$'UTd)e)m;hj'mB1s"tF@VqR_XEsIgDn(M%;_'Ee[gXC
%=DLqf_TJN[LXo81]JG3U8EMTZ*nh/$/(^deXS-.T$@E$NSi=,@ensX`TTL?4Y_HJ?\60.(M!d^Q[QN--]YjXd3]mdP!?)"/cFhC9
%Pd$GpHu$#<O#:>639/2k(Kmi:_B9-28.afKqt-=S^`"uc"XChg"g"7Y;:m^p!nJ;iE6][\hVMHdeEfmFC[j:1;P_k&2L="qc$q>Q
%U<-nsgYk50b-ckX*Co1VqC?I+L::'^Q1E*7Mm_TR8SAP<4eAg,'hTB>DDsp^<j,qWXC]j(;X',aZ<4/#WhbFcTR$,+DI)ho#!SPF
%U[ibna84lc<=4EbUFau.H!V8j_Qa[tDEN]Chb%!l7#U7tjfqkAk2s2BLs'4\b,3_$h^O`CZ;LS&'%U^Th>NF4^m]J]V]p3u@0L>?
%jE=hRSg)`-;mVWa_"nom^'<Ii3NQ'*9J:>U7I9H]--P@UYME9u\tL0];^JNk`-8qY6WfJH8S@E0Bkm*DbAp^!qSd;`Yn$_UalIG2
%*I0l%F^Wo>"g#f+8/Pk/_4N"r@b24ClFlSoQZ&c%epCT3o#*F,(Q3DJF\&an9g25aKGC0MANF@)X=NR(roKm\Z+?"hies:1H*VcG
%L\(<`%tjPkQ?NX;Tn`:/Jhu`Fa_E7(D(PQ0er,da54\7FZ$MJ9L@.b0SPfc%I5FR#)L\%=$t2S7'79CCaSjfIk8+QXLUTlE]Y">)
%s3*B7]d$/,[4M=,[pL#$Z1Ura<*5rE#E-to?>\e2&(n_Z8HpW?V_jKkkIJH.`oP2gWd1JXd7W6.-RpR[%m<),pY?(K;L\s#4\ZTT
%nP]]V"__EbA;OsZHUR,k4Ad,alUjtM6mK=r9:fUYc%h3j[*2!nf0;Ac1\GQ_H5\'cN5$G0V[4RKkKUg[AfD_*XV0$-1Yso``A7uf
%I3_uppOgoC$LrQa:%M%?DX^!*L[nTEf5!e+*<&i^qEoY<]+2q]N+nnmip17:;L&-r9(_!"I\iqkU*&Yj'qY-XXuklf49ZH<$uBJH
%g\7f=FD*!WQ<llABnLeZ2*EEFD6tHn(;@>rlXN$0q0B9e57R>;c$3^T<FhP:=#4%IO3#nX!Dga:'$]iMg?9u^P0?k((A.!\`^JbT
%8,d5<rX"ia_DcmCC@L=Y`)h*JC"D[MZVD[jDTT"tgiR-d],*r#-1A<eR.HXDUb\J*Pk]/f-.;DfH'e*iXk?&4+l#?nBWdh#Gee5c
%+e/"\ZIt32aU)9hCt[FSn!:1>IKgsMg?c:(VY]>1nV>u0b7?mqHClEt/+>@L#NQBr<BEeANigtr^E;1G<&E]f1DHmH<&\[b=mp-D
%c5EWGMerKNR)9i43URO"NBGcWVlbp.<#Bs.=Q-R*,:3cBbc:eG?o1sJcN>Jph^V`dm\nbR(gAP'!@tjA3HmSd^BeVN'PPfBE=Qc(
%.H7SRL1:ZLD?1XV0n&gD4c3@(bUHp'*[gG-539$R3Zj;"Kd.?fH0%uCMHgNXXO+-f$WnQ0,/f^$f#Z$M>8\qJ;A;,"cp0[hY=.gE
%dEn=l/f$\J`/8n8]cC!/Ct#mHOFb`8^392gdgkXP`ZqF8`:5,#,VC'e4)b)=ZEmq8cQL,ed5)b`Kt3g"?#QNss7='d%;TX]nY@a#
%Z+ccE#c!F!mZKHN#'LP]qMc2lUEKQVi8#FM",HMSiiTI&WdKkJd(:j%<ZJus#<"D=I&hh%Q94fdTUca$!(fut2#bRYq6+(dNS1Nm
%A"?BWn(9k-k7,<O`ZsE+ZTnVS_lSZL39rBW)3qgd!Y,,4P5.A-e[rdZ;<X2ompc:#/1%Pt,3Il?N'HN64SlrnLg5.,$>W+^6>#mQ
%,*Mt)a*f5$0a.4EZdoue&'0`>]?du\P'AE#>5Up`4,,.Ea:K55T#`QrM28bhTS-^1Rb5g,I'L"XQS1Y7=FjM=04I8:3]adSc?a"/
%!:FVoX6pi>-feCUNK#j2`*16g3RU57f2dQUV]UGEBMKD,4=$_Y_;IC,dR&*bP"ip[fl?BoHc5U\W-\)kAKM90b-3Q!fof*+>`['(
%:W>2R+mso/WotRc)&o)0&TM]p3cW@cWogQ3\+[a@T$>7.$6$A\l]XT#KqV.Gk'MB*g+D138OCoH&",h;d$hdp_CmS1`@$S^O;CJ,
%(p0>&)SG;b0AMX-CB*F--&<@N`W;6V2V]`J;Zqe-dc(R(DN?.&d.aSnC:W"Fp'<pE$8>ph<Z09`_$Z.:B,@bCAG>d_j$CNUFi^4m
%.R+lb<u=s4L[@8=rB:u.5bV:%MEn^-2Uj+on\G"`<9tPYaa-,baK3+u=_GSWZV2#C9AoPX=;DKPIF2!F6DA$#d+-u%X]2UWUtCnG
%7^sjDZ-;hSY>i(<H!DU"\(6]PUC&e;8@^<UaKMO>MdQ3GRsL]g_[a9>bB0M?o%i<M4=+3-gaBG^l7%[bNl;.*FE+?rD4%^n!dkhB
%CqUM%&F$Pfs6Vko#jR1[aamp@k%&/b"\-+6\EZ2.2R37iYK&I/KC9L0-S\j"H;'N9\!*6"7`)[&bs(qRnSWcCG#(sW8M+SkCh?\F
%\A-LUGk"kAFlh6A'&;:lWTuCrqN`u]!(dRI[AIRCm_M#Vi_J5C7WSoh.K8)s;ro2-BmYS./r)K?qB"J_"r1ke28fegeX,rDKV!.C
%LO*U?oRUUMck]s"n%4r=M@'@VKFqmSrttWu?aKIJS]^LNk<,K@;9k.fiGg,4I.eEDQ4O9+4o-T0I5&b.`uk_=Lb5+"h:d+2-;g3[
%5@o[',&mrI]-ZakhQ0cn8CDdDk$IjEWdn4XI`hLeJNAL3VcAbo)g'*EM2^&l*i+r<fE_k9=Ekp(\NT2ur"Q;!iGReqXA40E;?bYm
%GXTNs?U]fZK95s*V)m;kpk>B63:nr?:7UYpIYh^KLKi=tPC<*PT'Qf%S7X=pIiC23F9PTBK+=qP'j'laOGda<*fCuZ6km!0#24W5
%Zq/5.l\,q9eYE/<eU1CC%Oi@A=GZu8qFb'+#[t-V,='`3>YL<&Q,OuWl>\u7:d#l<$=7q<8@75=h?6U^QRKdq*[S'3'nJ9dLEsfM
%p-YpiQ^HJ*LUT@?K`?EHUoL8>4:^,DP@A?[Z4W#G_],Qr2O%Ce9'bIM=r4a";_92n_b/cLM:]^&kKUp!^&8R`B*<PX,[Ct(L9Y`<
%O1cIN$R&!&5`HhJmK.%$!aO0FN`NqO;upBcAEAGliY%Lk(-_sY(G\OonnG0u#RtG2at/!BJD+hY2Kcj6/GRJud\[qPIELN(G2pg&
%%@jS1D2%FJkue$e_HRQi+/Mu02`d\?!1Na8e>K#!j<6/cj27"cgE]T0FpbVX3DSk"r!kdijLbh*\7K^n+LdC!YR*#KCE\;l\R8S%
%RDrCJG5JQ!fkt-/4b5%$!);I@S\=s:Neqq=FRBhmEcZ'el.O2<U)Xe1?;A*5f-Y0tBK,Eb9S[n+7N3irk!f17@dSoi"rNjXg%T78
%%=jVhDJYKTWI%GAg.C!m_17+<D?%RY!:K/7Y+Z#Z'.T4m9bWU0FeTA"abPoBd3RH%nLFD7aC3scml=N3MM0([RT"'!M;<`9J%UBl
%,*$[t9--$'TMsp5k)=lKoF-JWN34^V<`\"senMCs>CslV=3n5IKE3oHN@Vq.[?PQ%DaK/J`Y#RCZ*RGS\ojCnB]R)<;p*6P'9JsI
%Y6[S&HLcS=c)P0En8>`37_U2l]fAf7Ar>Sq7*s3eEXRdM*[%nC[CGFbY)`Z`7>K3aiHm@U@Jg!Af)MXg*e[q$lWtY61f`jKDK/X5
%gd5[e>6"B-P,@/;QF2;.q)Z\;!-J$O`"ZQ@?_!X>\t^7u'4op4"!SK38+jhu:>(^UpZ_"=b2O8EU$Q[]qA?Q0k[Z(e)J29255'A/
%5U/-Z8F97'7kpL=bDNfdVPeNJ.W+,F?fFa(=D!To5s'@`.s;=qEqSpSRcY>@/YkS!ia#ehQO+(6999$#[ge6WKl,A-[rTK[;P,YJ
%&B?i>kF%hZkKC4oDTOX[8]K*lLK8NW3blhPSf.iVRS7mpPQdKK9H(`2Bp+<_2Nt44_g0\"N<MTOe]-aIm2lU.6^CLRVYDnePN<Lj
%6^m4p$ZlUWk4Cu=R.eFg>c'0/#+#bCr(GNej_1rAP&XtVM&>4#@g8"'.J.2JRN2W4\!O2AMTaSDT/2N=q*O^3eLNJ?[61JN")+i9
%cKA0/jh&?dQ7aZM__\Z[C\_l;@gjt=k>SSG]+IXO0.Z5'YfbJdiJG\nQ1M!,o%i6#MjK\"WRp]t%B'ZWq:'3UDXc)n9?R([C\_kd
%V2ON'o;U@4Z-1k_ja?@$Hq9p6;9l(GbK!M%=ui37!Eu<"O,kCP>Bj<UT5kt)YDtg2#nV`,C#t4:Dq$@_2D$("h$#c"nb+1T2N3'N
%"GgjEPOd=*Fp^HSidfMrXQ&O"Nlla0;qXQ6R9DbHC<E18:8&"OXXl+/$BHZ;F;490VXQ"\FTLP"l@l94T<S5MQ#::>\lAO5Q.XH]
%f'f0&G'`XcZ\npGT_m9QH@?1dGj%[Qa^;?i-Sh>+I2@[J!-+WC$$#P#4ITi*Vrj>e`<BZ&h8tfAA!1jRSSjZmfq&-?&nTT"GU&D]
%EgE&D"Bo`;R%=GajNtAuQk_$dI%sPpWDA!QI0\#)MXJ(-JZ3S9*Xp_rf-:`1:p6f[.F8::Q9M\VYpc?@&82`t)PIc0&k>oYO>2#P
%b/a`DElq#q?66#F*\F\LZ8#+R.I8'M.X4gi.23Y1EqM@FUC3!".G)X<MFBL&1KuC$^8R?C?`io3BoOj[@;?4X1@Onf'Zqc!hr#7F
%-e&i&U7PO$_'E/36dr"'dG$CqPAVgf_4ODup+ZcL5Z?P:3/;2dofjfZc$p$VEP.Z!/5qd$`KXbEPjdfkF%aqXYtWQ.0^\Oum]#CZ
%"TW4P[/<3HcUgi:4Y=eOK5ru]3rHhmK1>Bf?rm^9n3(Ig_f@dH&V/r&O?(?Mio9OHXi)!WP!+Lr_N!<udDh'$US_/e-Tc5m>!S8r
%\cWP%;0B!m]qb6q_4H3'"XG?6B;pb/0XVMp>E5"Ml@/,tHTA7d@$P&-$WB?a_.%^gJA[D:K,V.D)@B$G/F+]El"iHKVlVlPKfRIp
%!DQVZT!r_h:7.jUPY[2@WDp*YGCb8a*;Q0ejZpFI:Xl9]rfC(3DOhKT;<\`dZFGooWC:`Cp_1^?FmHEuNRWq#a,TQ^dc_,kMn10[
%K1Xe^n`&bls#+K$Q1OW9b!r:1nT]BP7QE**HFu4`",I?;<)Q3Xf>Hj3hV>'#",6%!/re`'@Q6RfKKM1HktstCL7L8l[=ZQK)dUu[
%]O_0_FAd[OC>sqK@S#BqQ!PB*Z+:A.-cMU6Ro:d^A$6dQWTZ>^B6<qkhSM=2=`k^2p*=25.V97X,0m>m8l7]F?;R89-:;I3Z,'rV
%ENJcU&jL5mbP7YI-%:.i>#f2h;i%CcVpgiQJh]eFCap$1V3rl+#6YC_.c$0i^F;eYSiEU\F`DS9T#=jnMY!uVRAZX"IC73[9hDrl
%AKDL*4=\W<*KYSYh?h<.QW3,+2DeI)GO<PcA#E.A@cU+GH"s<ZS.U($b.J\k6782sGbrPF2Y16YS9OAC4GC&NG%I8"\#-Mc<,?ES
%;>:Zg4H98]h5Q_@'WKRHe<,%`T_Yaa"TZjf3]=Z^9`mN:o'I>R#(gl[LO@*R0`iVDYr0-<)m_h\/j9=:6"),c^3X8#4=?t-.irX\
%RsD1f`>VkC8V_COk!-3;4CiL<Fj.nO7>K^iZ-J2+l\lYYWR04'kmZ"6dhG`SXhVFT>ZFJjXB`3Pal:m_dS\$jOOdPoH<a\Xkf!9F
%^T=iG1*9_XM^':Ld:rA#BZ$#DL3-$s2Nj:25iGSW')_--[i7g^Y(N`)T$OL)L[S:rP't)[OmMt1MI\r$Y>?K;RbZLDOp-B=;^;_O
%?!\caTj4Eb(7*?^+*9*Z*E4R7!u",b-s0dN9B(%7W%3nkA"UIp%)sb9X=iu$>TpYP4OLI3-W`i4VI&^4)]M3NrsD2?f^r_?o)=cG
%]^pQtPD\pqKD/G!b%$Vd1s.[/0$:dl-c>Z-f+snugi00iUDW#,dgQ#PYJ`F;g8Eicn@-H[%'oN`jKjo#A"!$@]7k?Ii#-]S05L<Q
%A(bt"7jr0A9\_%^b/86\*IC%d-P&S`mR:pLND_@2G1F!r:Qk=n`F=Cr?)sm8$J'S/SO"HP&AM&u<kf(_?*g.-]M0GJ(;l'^qaSV)
%S2@ftolkZNH37KdhD@9^kn*blK2&[ApJX:IGh\-1]/\Vb(3lafpltO\4f0D3pH:rVG;V%)F';NC\$Oq/n1/+iATtTAD1/*[lkcmU
%Wg2E5gko4]:#lX`6Y9;eFe`4.f2F331Bs,L_OJVlXF?Ra$C)"W'#lSiCZSl$FUY>3$9`VqpPiXe?Z>-u]fWYpV.^mWZF_P/_0R??
%Vspa_>jQ[Dn@"'D=9g<XMaU6TF\6EgViPFYXN"%WkY6oO0%FDq;k\#i$n\!YDM0*[ieddJ@pSK%AkJ4PXOPa!]f53V8K[d:r3UH7
%[:#^9nMG+rK@aBeaVq2qF4SY*4Z71nQBa9k?Q+\_X17AJ\^P>p(oNN-YUJDnQ'+:g=ui?N\[Y3%MONT(1YM!MA_67)qfIoHpg<?5
%4h9P#)n)eM9pZQ,@KGJLSG$eMU>/&"]A9:7lKJT/ST(p,,)%u0GN!7A[%`>m)nFGUcE<&TFiTAG`bSgDEPf@3-C)BE/lpqN;WV-Y
%"K1a(Kme!ua/Ld4*JJo^?@mRWm\7Q^\Z.h^)uBKL5.N'c)^)k,@@pe)+.>.?/aSZ7++A.qHA-diiU3`^p;s//?lJlFKmfDXOOkrJ
%PM>7tfYtP"YYRBa9N@_-`lbiGI1!Trf.QDgWE?]C@@uC4\h5Q#_t*d%W]p7GeVae3j;'*i!d3&15.Nl9>MiL3m$"L8P@Sc@UTdO3
%%/G0i]turn:u#[Q'asp"Wqtd+<\>ri4.Br^(%u>rm7N(\E`IOc1/18IT3PCRNC'Jn"bhAF2X-4.lML.h4uqGO/^i6#m$$1?@=6D%
%(A<Rc=>X==1CO*@``dXtjm9iJI$D.3)7B/"becOIhc#X^B,:2Lm,2a))s)[WEsqm+8@lW4:/\B!@CIl]&Xe#tf^>\caHk;^44FVf
%\5)sdOcP=1;<M"fC$H.aa`3;Er3T.X/)B3OPe"Y,f&Y2u.a:&*0i;M6ONNpOBpS&MP6337Ph)D=%Xl5R;dOq7'E$C`gs`j8=11oF
%.3l'$H7$)'5&jo-?=fnKWmD'p7aYf<haSDgZ-2bfFd\7'S"qbp"lE7!s506`F$c6s1!`=e]rptt5>KYVLZ%18s-P3if):(ZC\k2R
%7/03;s'^)>b5Hhd9;N=Ts#W(DH044<nj,h2rI63G9-%C=GB7la\_R.5B4R*SAHKK`Su_BX9Zg?aT"A<ga7eaYB9K$pM7m5#:%Y6Q
%h]X7MC=`%!AN69Mh$jVgi`h#+'Jk`0&n!Q"m8M:=d9RfKDX>hCT[T7'#.YDu-d[bFNJ[@)m'^DJ)AWL6<^)YTG1)*WN9]`302kN#
%#@.e;a3maT[6bqNF],?gf`[X7)W8/t/1Wl;Qrhp35u9tHXIKR["E_d)W15gO!M)(_O.ZJ;=$1CrY-c6C.3F_OkONq5[I4W;40&#Q
%TsT$=oG=2!:qH'bQEg<tP/mY\LG$Q#/S9mqCoe4-Fc6dtCoV>I!A!RtA\5o$kGu>cW@M)<4j$8TZS:P/Wg>f]?12gS2b==p\QYZ6
%3Q\d4E21ccFI1Vs!Yk>"d8L$Ni>;Y$d!7QtMu=S#80o5>['Wph;.N9I0%hc[2VIVJ"M`'C:n/335NCTbfut0.lG#.<,6mFjGC=8_
%qkqnB^\$AIc;[lXqX;AN+,,(A:3CR&]_>36=VG0@G6qPF0q6WEl]XZa^@tD9+BGW<4mUrhh8cu@5CY>h07tGKX?MW-2tU2KOsX>`
%Or*?2WdRIfC%ofo#?)bk.33OQRY@,6l+Q!eS-qkhn4P"$$N[i?g)!%`<mSsiIG\&N[S*=Eo9AP;UT>JA[g7jB)egnSERkUN,C<?r
%d:C.&Ed9QnHBn;N@Ne_jm8YSgC\"l4C=R>lj_,_dBt>=4!,\SX-W00b.ni_=D4tHcl6rHC,8^AP^1X'=p[aGn:PD4eB(Ms39PRai
%ddRA&Q>/#%W>=NUfsm<A!C'rOpc2G)2o\UE([p@T;0SN&.&ZVB9&W6[k.OAug*NY3*Ad(tQXLAJ_H*i!DNnJN-L2!(=@[:O?6Ing
%lb=iJEAn6\ds&4C0L;=1:DqPcG:QAIAFOjrMi\s4b)W?IHWV6+((<Ar40[5=$3-f[cB79%Q5F42SY=)2M;Ig@B9=m-r?SD*UNbc>
%/RV!K/\[\!jGQIg/+XB#Mdg6=IJELaf)n>r$/\^.';&45RSN"r6,$O)X&arL6V@7q8Km*SV4i^q69b*58m',k20&]A0(P0>@-!2\
%jEBZ'V,Wj!.4'I^=$3UJauhad%sZ"L*euKGhPZ0p-q&n."frm=D11O3a^G?d+Lru`O/BcHTT$;BqJI`k[8OI&$k%/K9*.7k==[E@
%XRtp4Bp?LBcnL00W@rHo1pg5H_iI!dK43)La"'=?HAC$SUhga6L<REGI(QBb1,rd?O'O_RM9]a;@ZFnh(:Maj"K$.2Q.IR9jjT?_
%aZAcD4%^U*X'E8uK?dRbZK\3NNMLSFT?&"<^",nr\+D"p*q,AN('617"na[)oGYP+8J(Ydk$f7bEMnkfjpa"H_PK;o:.a6h.Z\X!
%3aekNa!kSOhFPp7eg4<Dk("mn%7(=Y'B/U"!!8WpIGX0@!7XQ+A*l+$h,6G2kL=bj=&,N%]5sKt.sA^>%ejKd6G%uMO]Ob[=)[0.
%j4[iQ$PP<Js4L:GZ-g/iT"iQ/;9*Of69HiLNC,+&4X)hEDj1_idoV^22[IQ\<#&%=23&g0=-';pDGA<TafFQSl&2Hr;c1Wrc(Uj"
%=.O*^b%=J[U*i+rS+I,DN[k!Yko%rSa6>]6*n1AgV/l&i(X0Eu$NKcf?l"m,oNiPP9N&\t\RCNCdB'YV-Cr!lTW=^pgQ3BkeP3Ug
%$JH[/a`;EC8Yt$8j!Y*T]Z-mFjZ5KbUDS*?l66>q-q\f#>p;1]P$LZ4o*'6fQ>5:QF#8W/=[S)QX][-L>9`8U>Mp]=MC#Vgr-`@Y
%5W`-<eX34:9lq#sY&uo8J>TgYH5=t/.cZPhR)PQ6B9jh.2&l)^RkmYL`R@br*q;_^pl?(\'#gD<Y"--ega@MZ8YY'f6uF/EoT>AG
%S9E;Qgtp`k-&DtDn#.:)c=&r2,Z/of;9F>IW?b>lV+:37&d.FKP!iUDTlbW]9[ZLt9,dJZb+<_J9qJMo/h=lJ^d!'H+mqf?eM^b&
%Z9k\__j)i)'G^aerGfYbKi4K8%p`5WL/cL4(f9[4Km_P@T=q<;8K-sH5C6NVSpC>H?</HrIXp7KA?R"BFu@_hX])@kgCF$9\4\J;
%j@!#I[_l%Mm1_394Qf\E1G1dh,jlSK=pYud?BbPgs2%.r!l19US8*a14M8P1<dHA\e5u*anV)`"KB.V*EWU[?Kni7MgC>sYj0B%'
%:FmnUpVK:s=GUlW4A(,apVK:?ibh`apH7EO6hT1D<FVMs?$N;C&n@qKiPIt,AD$3QGc6'?(ou+<^[P'J)Y9i;Zio[D$P1ch5,k)r
%p4\9roV\J=%V>U.F"TRScca2RXtREV:e)tV2(h!j^[7+iD_A`mnAKY\cb8gE$q5KsiGjDCbR4rHe(%PWf=CBII6WJ:BpW1OW*14Z
%jJlRf>#"h$6eiorke]^[I3)o,>iW[gob;>`aR,rC*\%o"iEHm1Q<XE')JV[9"Z/h(.('En:XB00>^4>JS*Y!I7kpKS00E3hEhdkT
%iT2@%fPQD1Q'/d/HK^OJAppYl3\ENoc_8&2cPPO&j*;F^Wh2Bt3$&lBGfU\Ma]<68i'g<89;%:u4Og(RY&WEoqJD"SS*K?oLK>nE
%eoTfD*Z+PX(ERTnj?;q+AaRtT%lLO=<)GPd>^32JkjeJlqOX$\GUP(Qr,%4Ul*PZJ`XffPH-q>$lGa@#rG^GDLB>BT8qTp!%Ote0
%G^:t0=Vi.%6K(qLHH"#5(ET0?d3WkmiOPf]2f+3/`>9SQk2Xj+LCBV%>^4=ie]H]laQg.U00E30U10)9.pR=tmbMqX]3=0Yr,%3:
%`&bk2P?rKY^@-?qKni:sOLacJ=t,>3p"Ksp,Y.0mIGpmrD2547EVY<Dl:&;TMt@l'*ie+@W+Dmk0@Ek6m19dp??G/b3L7o-(EP&d
%-JAG4DgeZPe%"mD='k(O(ETT['e#k->qW)SZ0_aE;dM!,A`>+tKF\</Q45QoMg;-2@ITbD^/rYT(Dfq(V'MF-D'^>Y0L3%ITE%CW
%[*CPS"B;#/f3o+^lR^4W!(rEEe>KT/SZL.9hL4B<9h*tY5&8T26VUrg=39-s%;=eXVpf+.;'VjD=.1!ipHNA)4S]q=-K=]YZT2B/
%Lj]3B9B:TX0r"10RYD29@5G(u`Rh&XW0CZc6tJ6D'%J9c,9"o-.+'Tl>K#962Bc8BIS$nmpBT^6h6IVuf:/?+)OdZoYLf?WrORJS
%I/DZ!iqqF&9%.n=9CG&'EV_r'>6#+\kXTGNCY/^UK_c`jRp+Y>EN*,fM,$sNYO9p(YhZX%[upG@F'!,k+"ah<S]MT=^=^ZQd9SaD
%[8_oGm9INE'dXb/Y&3+Y)\!0)JHKSEksD_%8).!Pn8iFkX%q<P5p`_H*@u03(u:TT!4sA;]jWX]Omi`5$SnjZ)@HP**.Eb57*eWW
%05d[QmLcQ%HeXtX>>mp5o9:C*PL1UPXM1cZk$D^,MeS/%_W5XlGoq>-+M<EBnV4$)HmS?cE$*nc89h2"94ER2Vig0m_f+:%LsfbN
%$*01r$S_7g(8F%_&hpo1eeTe=c5CPA&[0Sn:SlufO%/<5kloW>^VC'b7X*QN2S,L7-)9MP$tp[Z7Te&MmMGOVTb>$b*Eb--ct);A
%0*t59VrAF9N<Z>CpH;$^VoG$E9rCSPWV)2)J&8fOH-kmVgZWBJ&2oRcI>&Tf`d[cX*8lg>SO#6?r]6Hm;f]1Y`,'>de]iQF"BZL+
%+7/To`G_"1#0TD\[AiN@:[daZ5Tf?fCd4+l]C5gJ^cf2_BWu-%g[%)t/F+&mpbL[7#OXn2.m*eifegr:W07(2*Z28r-/gH444%mW
%%K%*a?Hg!6p,M>Hf`QKeEe(Rbdg6#BmCod[cN-/,PN](IiQVYBekuu!5Te[>8-EZ2(Mr15-9.8VM?W:a#gf]=#Z+8r0YXrp(Ik3+
%BIsEqh[j#t1I0gNLYr!a=ST_E9u)7"_@3%t!=$l-n9-:!S8$k#RVsnVTrpK?*@*2@l.Yu78E9k;R/UX'CU*hqHafN'bH8dL.&T;E
%,=hs?!KpBdW/LAiaD3V1/>T@H1KPXT)`cdhOOba=0lHiX3S3)\?n7Mc55VX(Aqd<B#k4W#E$60$h2k8^^t8&oI!tUldQ_O]jKMOj
%UTk\cOGlWp*VOm&B\BiqT*Bc4dl;kcYiE?o,EQfMU4]Xd0Dk1sKA\rd"IU3\'t'2=VWVFTa.Ds_rdLPZs*4*_5QBTFe1=WDUgj7i
%Ld)NMHM0pR(+N9>bD801KlrQ4_\+Q>$q]fJXiqS.?H>S1#k,LpiN\DFOkKI7Z:Lj/i7!5;5)jtW40W>K!JUECJ>>8gRTXUe.QHe:
%Gduin4Vti)n"OKhoiq:)0_&7e#/PP4Kq.s>]9IbZ'5!4=SM`5R0hHh_30]-bBm+k=%WGQb_[Dn(5XW8pNV8^ANE)^.(qQ!C";L/h
%dqG@,P=G<Cob/h+W8,c-r/QR,^;FVJ0R;))2"t,8%HpTral!tM]FGD'*.[smH,/&2SeKJ6'rKab6Ik=2<@>H&<NJ5C)\3'hoiY55
%0/WOPUi`:4LOa$+.!t.E]nZoCc!<%O18KIrb<O-<K`)F`Q`"=*JC!'PRP9/cC=,u\>*eLHP7-VnBOO5BT"N?Z\5g\#0@F?mMQIFX
%E;0Qg(f)EQL7a?61%Q=c"#R-3B.jad69A-EcA3T>XNYVPju5c#+sdRY\=_!nZn@FdGCbDI8-(J&#>5SMW:XC:P/'$:?O3]LnpW)k
%_D%1N:_F2N,AZaV)NK6rStkOJ-j4VA_7th#k53-qJprPZ2Rur89Y&=ApC(%t9q%j]4S:Q=;0+EoLu-_'frmne.=RWcKAR?8>@=$a
%MO\A\=.)=k`Z9Hb]nM+)@=n6>Pt:N&hPOcXhp7ZSS*QuAg"pAU<1B)Nhm>>5/$J*I6>fA,=;)m?Rrd`JmY*f7!Ad8KX>e!*bUha`
%XQEgF3Ub8Ac.4rsVkWf-h)H6aiSRPHOrk+6SpY`uR\AsMcpSAf`4OcOAYF\6'cfcI:@g4*G@/YU8\>l9q_']>IpCLR$"i2D!mOT+
%1O62A-&s1<:b^)uVqpBj4cc>aGG<20kc^(.<iH1U;tJ5MApY7h"#QJ5#,iX'8^!O#j%m-ER&cf/(@N((B$UF'1?3es9SY1bi;,;W
%D/](M8f=\^D\Z5!<P*HAe]Gs=rj2+;)oH[q6Z\mBc3kCKeZuW5;k"EU.J-mlF1OD,;udR5\%0WHY)XjjcM1tq&`^KG%SY4$X"`,F
%EIj<uY*\)I%E<J0FE`Lf+(&nbI?:6'9[]W?d7aEAiWdc"7(jT)r\SK9nUUZeZ?EmiVPmNA3]3%=mh<7LTND4U[8?tMp;9h?'K"6'
%PNEdO]W[QWjs)*PT'jRDnSVp//1t/o:XJ0T!,,9eh0+O/'\Nt_9m_`T1JZp![(f/lCpVg=_Rf`jH,A,Q)?_Gi3iDp&H4D])S*#Y%
%*+RZ8dB#km&@_$YRSYE^P'lRWnoC[si;L&QRYd--h3"OEcCnh:67oBNc9X:RC3^iCq?`<3XR)j[At6a(Rkf;U[>R]r=^JF=hqIE\
%L#?H\A(DT)KO7&'%,8ltYmVlFaGL(5c;lYJco1[lW.blY+m@uU+Z7'!6YGOmN%SJrL&#J-A:-l@B>+D[^^>/`T>1Of%0L8Q-H67Y
%\;]j3]-hb/$/#$(nI0\]!_F:LB!X6?Pd.-K4g/:U`m+.8YhqnU@[C;3WjU>X+VtQ9Vjm2u>H[l9H3>I%1Sk]p"V2\GrY5XR41e_7
%Ebq+]'9s35+*EK6[@Zg0?lYWTr-,)#P;BC=Eg"A\\F5m4`TeE8*NAhsXIo+6^Zk+GIQc1rfg)VObMm'-$3a?\0I_-ZGGGE7Xlm9T
%.N*ss>Mj)b>VFVD/o)gP:^S`=Ab\]!LW8^]N!a^WYf>^62r\pjHX2E_kiaV-]^o_K=F\%(FcstDog[Yh1KQT%=Fm![mb:t8)2EB0
%7#ZmUUCM`pR7qkQQ)jf?+p&OGXt>@YRq87#FS3\8n/&t*qVAkAgGI2W;]Mqg<MTM>&n/\?rNVtTht<UFDpD>d5kd%2qXo8?Sa4Os
%W:PZ1r$&QJomR#@Fa/Sr$*3I5ofp(FS@[3)[X].<WWWE8e%3f'#B%'<LFWRHTSfpEQ9%dh/m.=EEtcaJ%#sQr@)Aiq7ln,A05"Nq
%A6Fa:)&.X#k1Q/cc=TD7+#_T')HesGbd0)Q)4LhS9uWj(dk3@(FV'L)R\"eJ-Ii+@8b;:BdW%k-1XC/<1:XgFqA"Sf6?J=4IRS0e
%1EOE"J'W4Cd]P0a8rm:c$FpCSn1j=a`2pLe@K2TFKt^nlPNFcpVn[u:p]K3,jNQXO554!Vq[:Z(E(:0L6?>sC0>&Q4W+bQ!1tN5e
%b8GWQPJ2'*6[(6G`6B1I'M,Fg2"!Ts8L"V4p"$8`d?#Rn:ZqNYS/fhr!bfjf?X=S[4aYB1f[`52Sp"-_O%0Wm0)sVPa'DpZ:ZEOV
%ga]m[iclAe5s3D8qr*+2ZRYlV43<hOS*o&U/Y2F-Q.fk`i@dgdAH-eXl%m0DF!#Wk0I\5?@K<!rWcuHGe/b1Gk1`[-Q_$R:ptW\f
%SoJSoP/eiMT"+Qn$iS&m;+N>F5Pj.`oEbM<(3[\&Wl:i9E08UJA^5&6cA`ohc!ZDOl&;FS:Mtra*(QD4^.`mXf3r)DWP/>mk]7]+
%s7#6IU$%(&s4HP1Ta,91iR'kuS*6$_7mkU8FT#^EJ'(OF"f%-5Sl%EGjQN?>7fhV!FS,5D\#Q4L)#iM[gMq6LY+_95EL(;s&Ik<@
%/l8MGLDsScK<6E!)*"Y"_[anP>d)#?Uo1GNgCi9U0O3g#;`8LPpSqDk>Da6tFo_SJ4Y<g^?38$4]m[s0#-,ubmJ$i'cu170ntF,b
%Yo<pC59+oHTl;@Z5^>8bTN;2ih6*T"(ipWs<.RFK9EcB!fpD_t]D\&j#73N!S;Srl4A7%Gq@/BlbCb7r#1V8-&$tXeG?f<!IkUJf
%&;BW5-iSRi00qLdnPSrsB%!.o(EWso_)LR9TA[qUH?Te%/!0PZD7;ZUI"AF)MVnLaQ>brT)k2IWaR(njFrqK;HJ7-CJXP8$GK,tf
%0=X8i>\fX>)>fV]]=Fj3jY?_HU%uZ4HNj$(q<fd;eh\,M1/,dV)GDi=iPR%gLVlWIk<iIt#:DaC1WKaf+*(&2OVeb;h/SKcK#]If
%[L:QQHuRjb4ttf<aSt2*ME18B14dEe?=*i^0Z0X0#QJX_iFT7i_pnq6"Q+d[+Ui1#a=E'kgUQe9)*ZE8cA01?g[MZNW?;Um)oft2
%K^i7j9q8#Y_Q^)Ycj&Fd6E1j;^a2<]=o^Bo1W/XlZkI?IoK3M97gC2nMAoO..LX.@.3X@8Fe0saj@QW`4b=mq0)Oo)>R\Ck!Pm@7
%VnolpZ>mDh@-AUCQWjq"__dKdi;JbSnE:]$J*PQr@fZuZWmW#clVc,N&W-QJ(KVO[WIp[t1S(de>WrWea=PQASZ2CK(#e^EKQah?
%J%Wd,_mf2ngI\506.49Hnt)P*Ulsl*'pKBMh((!%aC3[`pV#`^#ps@mi_i+-'p*<)oD1*("=%Ve^\5#b"n&"h:'Lon%/ND`n7a9n
%DS8nWL<k!V-f!]MqOA/fH$"iG5bg4]5!:6RS.ai_&Eb^pa=.4O=)(6MKD-uinT1E"&F8KCSu8&1KjIC)_=S>j8OG-m.+A8Pe^XN!
%Q<^BMh8ZrD6;::j(JCut6WImGQF=1;DI:.8G+h5P<,2XWNgZArfm&UfidZ2/0a1H[kofa(:\4XX%bT01@%F/Qi+pQY(/ghm[:%/%
%I/VbrW7K&T^J,uffa=cdC'sR+g!\M#]W3YorQRQGi"*,;6iMWEJ+,pfq$.u=_=W2.UEQjSmb@;kHgnldeWRn/Bu'c2`(R+VSe;"<
%NBc(8TEr2TDtp)fK.d@JnB"S,!_)%$$,_kBhAm.)e]BWcDFpd9?er@NEm+7-i&;uV5`S06#j%=:?34@;7\qU2KnVVRIZS@dAZ+JI
%X&>?@17p]Dj*B,Gi*5Ki`a.F9[J*R=U3/!]lGui;iJsBo#Q>\b_nu<J9s7lbEq"=NM*M\u<6B"5-(Jmn3g>""]VNGP@iH*HY]h$U
%Y28e<.$OQEKZn'nN#.:l7bPFa,3-k3m\0W)B8#',l]t+S!oui$+T#mKk$pUr5'foE7G^5lZ_)VD=B##:A,u86.<\Lul[`,sD1):n
%Kj\6U+6kEHDgRt?\Lq2Oq]-dYn.,S:RHFDD&>SCbh3^Xi.[UG7d+m5/9@)+MY)Ocngf)nY&4/"R0\V7Vrnrk(Z=%=!E4ZZ!s4sAB
%EEKugb]L>hh?'X^&</"8_(`cFaURB[;a9$D[7^#k1q#KrD"F]h>FJ%GHLoUS+1bD>:h:rG@c9q#pY-5mc<qH&kTL1"nOg!=%@8a^
%l?UXg=f!)H,H^\L#:]gFFgjnW_2p"[WiYsmJC-1&TFZggAE1+"i@116odVuS.XBJ'p#XsN:8EO<_GN6QK*2%;otWpZg8s'FTBtnN
%1r4cFmM%EE9s@<1"kW6'1%%^i_OCtd@"G/0(u&j]Y)Y;m#dFC>4oR^;-=%?6<!lE=[LdP,n'+!B2?[\unDL/6?dS%E1?Fr;FTuIi
%ZT%rUk$]\iVOVTh5/Rs=ZWatCE!,eC$!(gX.pfB[oS)3]MkMI2J.(Ydc,rr\rrD@1*/T=WO^KGDnCA+CMQYD!l$R>eh>A(N=DtcE
%P&K[VVEe'ZPPT'egPcUmC:uRE%,Q(N>:rEt3GPo=;t'rMk20TR-+_df.[q92T9LPB(drD3a\AMK7EJfL+64b:-Rm:f[/3Mj0V>Ru
%_qb6_5l5Fgf5*X'BnII/Z.sk6D)nA\GkRgdA@WAAYfLrG[-B!nhh=f"h+ruL[E!)$JG&hhR!*=R*`Gk^>r#;M]R(!TDP38m5J'=d
%>NdmOpZ_PeWWbRMmA1Fq+rIArL=AbOY\ifZ#u^O(s2<ml'fA7dV'f2pI<QAYhkqYH$mhFXJ@$'8LI(7_i-+e8kU#PCLK0_0Frr=.
%DK`Gk5BlUtQ^c"!*1Qn;A*W0lA9<VT,FY)S5"f=Ioq;-HiSX:ub43s\d+W*ABb[d[#@!#I(KPC4R6eq/7"_%;!D`pXSeXB?K<IWq
%,ue/[#?tU2M_S`Mfl>ML\qps+^p&H*-a4@l)Tg2d7aDgM"B9#/p99D5Rh+&aj(BgjJ8l$ZVdKnRCLt!5m_JFWQmkt7GaLiLXS6R>
%B%H5MSEqNr1PT8k$sYK)f$*Y/55VJ&c5@:,1n%2;4H<1e_kB*X49TAt]Pn]SVs]h&#BMNC#5L_re+;rjQ;,+sinrElph?48VUt:\
%M&2Qj7h6nj+_+s1jqkP)T,4eOI#s*u(O!"dF)Jn"mU=DJaFE@=bbp#k`LLum/5mr7U?aJ+N+[74!;aWomr01U%^BD"N#$=Q(tBtL
%a@32o!Ik6()a=F91%8V,=$WD97QB%0)W2C;D@j-%fK/qo%O0jJ0l3-8%h;1h6Fm-c,0p;^4RHN?jZaiXbU9LTql(\9k0%k:GtE3H
%h,S0WS)!Dh@AKm@6T`('=97au?u$KaD6-#Y^U#'[:TQ7VpgI9TS+rC:r/!S7SI(P=Q08<kVM4>[>EqDdLd-#Q`fB#p";dO_l?3SG
%JR$$U;7C%s5[VEn;7C&F/aA6g)0J#qMgMFq1khutULQll3XU)on%Cr1R%P_6H[$?Oah;`,LU:!c"%gsuLP?A@+Ng</Nu5ZkX_\<n
%pIn3/mS.<"e;Wk)G(#F7SPgZ(W93p3f%4C3#I@sM[:C`F;_6;",-q<PKg>-6I..hi."W`mr8cgdoCBYIZ#MYZaYl&GETd[tVgFpW
%It!V!q4>gPA7*siA;U)]c>QU(QjaUFInmRH$"r$>S!<+bFcL/`n'=9`8G=1T_duLm?P5($r:57!iI!n;a"/=D3"nQ$E$iAqFMpl2
%"<-I@+RpZF_>gbc,?VY[R%BnuGHCU.'u1&;gC@u8O?+fXe?Z5*[V7<H%)nYX:nL>]V$qmrLM<hCJUri5<<p<M`Mpc=Cj!r12#uFJ
%jHgG+Vf_u9T:YQ!cH?JZ7s)&:o3=Uob+b^k)5=Vtl@kq)W*4dXoiS)^3mVT4bt3co;KE!$F*j=\WV*+AMJ&CG&ZH4Rq+fiJ\e5"E
%EQc7mFr-uu,\sa"S:!\=oFnMiS2n]/\1:XD[>e%Q)/=5g7WXDgJ^-jf5a7j%,72g[T=b;LYl58hYEJ*[geM43PdDa"-I!VNra)IP
%3g<T9"A.&mXdtlgPT4g4b-Zl(TU\9gqB3gQ,\agrU!H_(Ju!N!VT\+Nf50$C8GdS&!Xtj32/A$='SdJR+LFZMWF%5hBQR^\TRaOI
%Yj78e1PUhDAR[B!mtF4,9I2UpeY@ZU([3O;[6jJ)'!k$3aJJ:A&V)1]D<Oo":k8_8`a'4#g"Ofp$d$rC.RY_h';@m.e=r2Z#uRG%
%;2\=Y-U`g<W'r/=';@mAa(eJol\$[)\>*&hU6O79;?">t]mZ*H[rEMb^T.&L:3"m$b*J(Wrka(494M*TAaJ'3jiEqIE3DaK(RoKf
%>[ES*;YfbF?ZuTcS=-FV2MYMYWQ-Pqchmu\2"7.W5Qfh*liQX_;I7C38^70A/*1nIPjbkMq]E%??H5IU:C7&_Q1?s_b+T!qBr/J&
%M38<RJ&k7X8"(iU[R*^S.h0lA^Nu?*r^`+L:a4c1HN.(EQ2Z/qqM5*$9AMD2ed"Z[9g,7IOL+t;ZRF6ds#Vf^\c/!Zd!56_YNM`7
%FRXbsiP>KQa6]7F@,_.;TDoutqM.!SFD_!6`1$PmDa+)C0;`1Rptu+js#j)5s3"(EFQ\/GVk;+AM#=H*BV/c+[s32jYPro)NV@P0
%r0!h2Ze5n!s3G-Wr6`9_O64j0%"N\Ej.]Te@K`J-C3%SeJ+9!=g'iM4iH0S>8]#oShji40pcnetYXFX$A#3l!Pcl$ms7aiH:NQ7H
%\ECg/4)Qi=qYBI7gRClgs+I%P5JI*m9.lAlqUsmVT=qsgp"eYtpO;$rnt2]Wn8I\A+5/1)9YY,2pV2(D#9RpLPQ0V+*mK0+PFoR7
%qj3p<]`%2Tf<=%YGP[E+9AkI&o_qWns2R(eJ,'$?5C3@mDn^SsaZ$t]p$pYk4M:]f5J-moIe<UmIeS?+qW=!&huE11^&M/@]Qnhr
%p;Kr(O0:cnqs!u"L?F'_gGb0(T7'-:]NF\_Y<RC2eb^H"kC<<kUMjJRlOQtTrH>'Q^&O_@i@ePfpEK-75Q:(8rqF]$G^L>-IjC-u
%Spj"bi&:MbDr5s9qNKA5^\PKkptK0Rj6P%K4T<ltYJ5GU6bXlHk^U!ipq(IYr'^(Ir:[>_J+Lju4FMI;q=G9D-RqcqepTq"MZ.,n
%rXCL9?_1C"Ps5r(IsLng2&5oVX1-%2n%O8Jpsl&8dl22O4YQR!l"?XgrlsJ=/JV#Fq;pqOld,@hm<;o$lCU<9o^1Bd5Q&W!^A[c[
%o2cHp^3]_Pj2X)CIeChYpJg-"@r,uCDdIkkorO-;I.cI=?iL$FKjVT@H<_\/9)n*9^%6``GCN!kIf0elpuq02rTpSWJ,T]go1/K6
%=WR;?rd!r;mdsHUo@n3@qn^nQrSTX'<&&.iIIo2_m\AZ(Ie>rjr;<>iDtE1R*QnDraLqDf`rF2g]mKAGlL!X#:Z$Wpp=%LF:ENA^
%p#ZW3s0o1<5CS(XbK$eMqrBU`q;6V@Is_*[0>Dc'p@Q>Er7f8aIK"Kfe)*;PIeq_VO(Xo@IsQRH%Gj*Prhm64+T4%$jDou^IHG"Y
%r*dVFs5iEiP!lt\m#*M\QTsf&rn2M1I)8s4I'\`85CN%=dr57<<r]pfh#/2gk?P>$Zi`:Sg.RA%K*rjL&)I&EG_\O.b(>MA6GRNs
%J]=nWpOAoX\We03l.],trUoF4rBK`BqtI#p&J)"9IB'2MlFAnk:JZXdJ+b1Q"bn)De93%3T2SG&+P!(tnTT:E`<jP*.[`1FP>oe>
%f/ltP%1_;+9LPnIq?$+;=GVIi"mb>HKf4mYkV[\&EWpBD3p]]nS3sAT&=:4_3epBR_;#Zef`qT%fsdQ@gX[&4];?drC3quS)n,np
%/q3aO`V@82QKGsXkMQ6olVCje&$i;55A'R6h=De,UY`Z[L<=r:k1/W:Fm&<;,rk@nH@tNu<F51H?[qq;bK%A)N'..0c_f1W04+\R
%X+scK;qjP9lKt&orn21*^3P*Nqo,$HA(U>AG%]m6F6#T,s-lGF%>A-7aYuokI#b$,k_86k3Rd>%i;EkC'\,C`6lLir-?Pu?kMk^h
%P,fg9.g1*k;1\eAMF@.o.68TSFD)3EU?9='@O1b,HtdA?)m`*m_#47kkQ&Z?h9V4`Yaut\.^MrD;8BMW7i0Iae]&_3BiKsh7T;P#
%I0Al3V342mUj@paW-B_@6NPu(!f2jPHJeV&!.6qB&tN;//C5dF&'8tE-ifl2!S"IjJ<**n/d27>o:?YHmm@8s'D#(H"_JKg15mdo
%@)/T>"Dg^5J9hXJl-KFK6Rcm(!'Zs#GJRqm?Ut9`BJ]^3c_Yk7J3s@mX9&[7Y7KLVae(,op>6'YgYiu`hk+D+(V"3Ub\[4g;*%,0
%L.'/B-r4Up/K*e>Seakdbgu_IqiBE[A$b(:ES=4-OS4OGQ@`W'+7oJdk.MS5hp+C9]MJM@ed5jQK+^on`CS)o&Vid0Q:/Yba62).
%N/G0p`,BM%.4iiu'QP.%1MdE/ZK5J_'QQ7D<iWPV`Z38]]"G,%bXO77=VVBU`hot*@oHd>An+d_qCOU@<m6uAd7]@2<QKk^]ihrk
%0jf"1G"(\hhHLt3KgQ+#U^iKmOO%C(bPiK%NFH*3(s-l+<lF8p%Pi]2C]cEM0hf8/\3Qm8XIb4.gm7$JSrf8?7*?@sQgVI&j<eOc
%A7Dp)AGQ<ti&-T-hasJMLgk:i#aWUEcEn+a[[9;BQ7Sj5898uas0L(cKd*XhZm9Nk3iAQ8C:9F"Anbs99I]NT]i!X!Z.Zl`C*MBi
%h;p?K$A#a\F!iQm%-E4SQk3H+ASctiQ'#6sP[TZ3M*mUL]&\TfM4RFUP?^If3@]^cKG@+W4fF5W8O=P>TNu:(;34+/`)+d^7]ogV
%WfDDN6R611>UJU#)0)f979Ip<OA=/9%q&\N:="VsE.)O>8nXgk+CZ=*:`bGcS>q1nf2E2c*R\8o+L-7?QS).'6b!Zc^+J<plNWNC
%<9(^5?D)0ZmPch_=SK2<+u13e,a"!10RPi+,Y+B5#miK3P$WLsj!qj'gC7kK.)Ztq36VbTlAXei7Ig#sq!B3>6?:=YCUC9XU_ZBs
%Y)H>PgXb@-]nc7:OS%OE,QtbPdhVCe_p!j]J[FQOR)92<ZdBKU(sBH)?2t^K8Y]4,l.HiI-/QUY8PR,SedG`@otmq8H\h&7YF<LN
%Tu_kjYKY:$ZU9r+`E4,>IYdl<M7`,m'.pLiQf&F<#X*ff%)p@nB_.Z`*.2P^?qQ$?$>jGK^eRC4(9E2`GUY%s]m+;T<+..e9%X>$
%6lUf(0@9%q(._/28'=*FkIl))j192l'PLg/J_/<aX=,t'6cDtGLu"*H]egL[.IRiEgCehcTjt\DJV$!p]QJW8Y_:5&X,o516#Rr;
%XuXfE:-ITJq_3QXaXpR&8VOHsge7Hal$/s1"D;<J>\@V6P^70+P,j<a%JCPuhh<AC78.Jt`7&UnOb=Z.(=R^J@ErgYJs,B]mY?'C
%LFAD>^BV=CP07Mmo?A>8%R!H>qP,#f9&`%HZ%F1;"_j&&_NcZA`TEAOo.XE4$HON5"mCPQbte+f8$I7r:kl.H$3KNiY.f0!kR)IM
%9!Y>:#W3Hc!E%N@To7&>V<ka[G=B^j.IoVCXrN@!,Yct3(\4i1Y%I6rG#!0no9?fCXfLE5[mX`AU7+-!\pTRsMH:a/f!2,-@AK$s
%4uQ#gcFbm&.2sSG$P6a>4bP?^Jq/k(JLqO8hWa'8?&aoP=/cA?<qMM0P[>$7+"liZgc(=po<n,=IH$%\KXd80+G'8AY_Rrm.Omt]
%W@*+c!3k]?b:ssSU^qe=&dn5qS4dW"G:2_^2th2RnM>\:'e(:k`H9f@26i=alApSE+lBaUh_EM:+I.<]$)U4r0BFNO94MWp1QY:T
%+&='.RR[U:'40-f4K+YR++b]=Li"Z.cEuEsQIJ=076Q)J(o>m`"ste0kgMPiOk:U2#/Y0bDHF*rUIf2Eg>^p]UN)fU%Z.qXM9!/^
%2Wf)?5A_MY5I#;_%'^AJ:8]S5HpCpHPq<o*p@]/EO>Dct,l=GQZpCm]dR9lo4kn1Y>jm+DQXVp"nrUpsP";*?ZV.r9<ES^]2UJO]
%3:u>K/jMGt<s/c]^_a%IO;;>-atk`j,&_8m6k.*30#iqf]Fk'O-[\JDNCdQSdqFUa>88JB]`FXj#-bYq5hH:[,)1d\L96ds;gErB
%b-@HWJok4K,\D4i]K4W*g;GcE["7j:-t9tp+J,FFnkFr'iu9/Kr$4H^qNUP;oW[RqX0u+ia.BU`2%a]q:)q(a/E`8(*]>CEn)+V&
%I0XE;:ujq;=)MZUfqV,R,22&4A]I`0@l/M]0'#Q,#2AVI1VRt;$W<N3Xi0spa(fuMOkWbX3*8YR&g-&8osB8qC3U_F^O[XGGSmoB
%HL&R0lF=S2P1WN'84beu'#HS&H5k`\6=+XFI"C/#\WMskq50u--7>fpX1kXV:->Qp9J5g_O_\.%Yh\5-0=8GNGf]7q\$mWl\3-_r
%6##G(JOXMnB]PIEG!0=a7>rY/@ZOg\ilN-H8N5=;pStYH^/uFaMMZ8I@hdls]G1EsaEOsRXuAXXpO32rB+kD\E/;=d>5U($`A_!b
%oS#D`$S#K1RSorEE\!I(6nE*e>c\t"im8IMUb+\Mj7G0hbo5t%i+CO[V2o>?9`#ctp@>/6k'?9dD"a_P&(<RMY[p9b"QBuK)\NDc
%:XCCga.2?h)n7.;pi@r7mUd_(/E?//.lae$F:Q^/8^W*q%R4ihNm8HTkM`rs+<p3]W'3S)HkSK(Dsj<YlNiR@^g"V]%[)V"*+Eu!
%@[$`##*(1:ddUd5n)t2>o``J@nWMeOS$Q(P+InSr<sAMPFWq@eHnE?O94])V\tq4qD,B[)"Pa-&Jkao9jG/gL-3j#`f,DNl.Q2W;
%.:%tQ@@'+;rRU%8n'&4OEe6YHml(e1+Or+VDo)fsR=4mg4Gc@0?eF8>SmB9M)+"m5lV>(o&[r6HF&&=Rp"C*G#S+SKBQu#m4U:S'
%;"m30!]%bb:Nd#nHDq$5Z:+>WboK,t#jj2M/[!G-B:gSb:TK[a-4J6RdL5\n8I)FOAEa`[<_pAsMI21ZW@Tna>7@ZH.Z[2:,%d*h
%#2WS20&6oRJrBB-ZVaam[2@a)U3DLCKiMq!a<WX*[<?J`1%a1n)\1\C;n<"'bl'T44rMS7>?<g8V?7e7E*V1@]2aW%)U"K'ct?V<
%]4?iIWpE'ZPU9j^`;kr$oc]C*.?B&Y.,?M;JXt4^h98LmO4[qMmf3k13CMq/70KeU&1q<(&He%Ym)R%/-N7jWI,-c!'E?GSa2GaC
%M%A?INgnR=J`_&l^h%ZD8quQY#m`W.cak:oF,dnP-^@MuAFNmD$6;rXo7ka]Zpj'JSY-S;k9Ul84q-:QAqDlD[AF^M">A`(>#O2g
%,(uFN?rEoA&5WT;s-6<X%IWsUatqlYGUSM<@GI`si0RjQ.<uh=/XUtG"H@+m_7&e&!`J8NHO1Mr6LX9MK"u\V@ZkhaKss?mLQN5+
%`/MX==V_febUKU\Y_"S-euR=c<T4kaC'r2)@=4%_2ECt=lohTX@i87i?lZ3):^&eW$M[>#W9tXHg%Q!ZZeL7lR2&o0[-fJrb\[C<
%=T[PQIc_7t<"G&7[Os._Pjsuh0.fO[*<0F8//`2+NUJEL9_%7,91G"%i4-*U`:c+.<`\].26n7)S[?ZHO^%T:KY5*I$ebc,JU.J+
%a.O:G&GjiNmAiG@>IU#FkF1[`d(mU)-]?JBb_#["]YE[Lgi?@g"osofRMYuLP':/0<XG56]N+`%!n#Akk^j0J36knHLWte=Rij!h
%K*Z1$?0>GrLOqK"`,-q/=k>I-f\7C<E0BtO@.tU0>@g4e*FS3-"$!^jbQ8chImsQ+"-0h2$[Ij"(lj#\MBV9j9AUr586@H1Fr.+)
%*:=OmWUbso:9>$&[B^H&,3($&/'>C-nDB<W0In+8>Z+XbcR:Jh`/qMR^Pi.jI36Dn&TR$]"Lk676:p?r?1`4JIbI%H[raL99b;kM
%i&"^`U@2hn&GS8PE2K1O=NH+3l#K_[0eLD-^G\[td0B'XJ@L7+)[MemIXtKj;eFa"&phBuVT=Blo:uJpeEl4k1_FHjmW'S9U`<r"
%C#Aa]"/OG@Z'Xs!'.*hM^%_[!>I$Vi*"(f9'T-')8UR8![Bp01=DGVuR5i`7(R'an?pS+LH3(`^I=ehMn=_Hg8DKMoi8.'snO^SS
%EG@kJlWbDNXmIeE*27[nU)6Kmm-:>"kao]o&C2UUBn?!p?n/E7:u`A.ncm9?/q/L#&t<->9-bUtjB#V>$PYdf`Zg<C(no$tgtft%
%/b`+\rOPJUk+)QSBMaJTT9mpEAjD#bd:Ln<</)QX<qj0j+LO3Y`q]V]5OXdY,Pq,-!Y,ra6Rk>2qT[Jma/8=ee8E(dWubH/Pe>SH
%4Z!9UnnBa:Z,<R>&=o:)S^7p]Sl[oeL8PJc@654RoaRn16>OZp2'S)*-<TRZDBhso&1i)0G!rqXO:IGI]5q[<)cDXePE";,0I*Hq
%-8JWOP7Z%bH6M^nR"lRrJs?tMem<0tfc<n(Vro:E/<kpshjCeFHnNB+4aPg9.q]!.h/9N?FG/RF)W6=er=L4m?T.i'Km(LK;oQu@
%4\b-+Z>/t(1Z>\K`$I-kZhlCWS=n7h$`nZG-2K7'YrTig[j+[CBa]L!K3;PtWS,<`Bd-U<9^l0R%i'&I.R5Od]h5<YH1_<45)5@r
%qZWA+B)M(R9j-cEf)6q\NO4E.(K-*^6aal[)j?LpCl.7"Ge\f1D,n][bA%Ch1UL;J*""f8GBIHKdpSgG6AA^3ObWtsNNY][SgLH[
%H1)VB8^A1^\Ts56_4_id90#BV,VQ3XPdmrV[#a3\0;*+d8qc(F+Z[*7`b-)*ks;W[n7m7TbTSZ!-86M7ee%PNNXHhp(k%XA'.[:^
%:O6od8KE4FU1@I8mo*u1PU9j[3\JdTTN^8E`&Pia>`FpRS'l<I\r+c39M,sQ.35%?`NabRjSdZj^!W7uAl!j/^m3?1Z0Y1/7c4#U
%Kd:h/Ie;RDZk9DJH'!i_,_9)aKTccE>M-$AnEcX,S@4ZB$Ss4P(O2`t4='JU,nc>q)ifq:V;hX%Jf+&=Y_U^4`cL[:fc+;$5!bC\
%Ohp$O8k23[/ltX/(t;N5A99qen2>t3c\lK^kr0ao/ZaWd@n@#eKVA7R8fgXR+Utn,%Jh'<S9(`OR,dO+:N@38@6.+oAnO.Os"X=f
%B_(KfJf[pn=i>i*bQqLl@8DL\Y5GjAAM]8&3mTn&(!GpMUSRHA'+MR0!S9N\J83>2oS:CqZ!e%cMq_6Jp1TVXa>/]:+,rYS&$`l$
%Z0*(5U(a/koK:6T+/disa@Dn0oqi9ca12L8G-WC5F7MU:gj;&jJnG4#4C0=e(/[m8kL(`0gP$=eC#>I\<,c#M(i(\G,_j8G(FcA$
%7SG>NBZtd9F#^kh.JGPh79AFp6_-mS=!<78"9o0`qs?KZ*bW)PZ>WCAUSC8Ya1@i/$tq1;0&j/'Ke:9[T\8$Tn:g-@1^4^"P;TT&
%lEQXm$nR'rP)%<SYco*FG]Qc-iQFu3?>HP-cKkYGhnZY]>i+fY0Tn!Ic-ACd/=b1YSWR6&DtX2aDtZV733M!Fp]A\EI!W-JY*mp6
%`g[tuL2F$@RiQimQR-anoO\?leJhkCi"G$W^]A%nZSV-?%pa/<JfE/Bb;1)8'uTI`c9'q7G@u)8I07.4L+bLhR?uIg0g:]DR=,eh
%cKC,67'seTR6Bg3T_f1oh0`WAnNe6;kh(D]2?mV2f2jEMEMYK(D=Hu!gStg_j#XX:&biNYE?2Xq(Q@64H6)shR6OZkXf7<g^ND*:
%aM"kSXg:ns]A'p9L=a#U?E-(AjOOW_pK:;iQo5hSFmS6X2D4=.R;[ip*`@5u;Ri74H*?#@m]o$lq[HM+mg1<Q2_UcelEee,LW+-,
%X:OC;qQ('<>h5;SQG1>+[Wcr3DM_jhmH\psbi7)c4cYn/dqO4QGLgJV'cTp6#pJik6X\RF#T9+i6O=`)i.dJHA7?(V+<ip`9'%%=
%P[p0qbjer\a=0h6-DF-\A?h)!T&I^\a'Mh#8e,ge]K_)4&>#@(*i*)feJW(Gg;&12=]S?""+cjUQ\N;YZ-ZW05\U'U\-/VMc&a&F
%1;cTVYdL>NrAA'#_KD0+6C(/3WbE&@E>N:7Fjs-qn2^mK1^'FO5tMtj/%$K4^l`n:I2#%,gt<br"BW!D@rX&cLV2N3][M&RATtCS
%:66d/B`@3uZAVgiK"Y1+/0F@F+0lkJ,SKq->7p,&5"E^E*@)gB2rTB7TW_[NDg96ndQ&Ed$`Z'Y-_$8YXu"(84$ZD;ig%td_lkom
%Xgpf6&#m5kW@d;OdPFXl:E*tJkm:g5Pmm-'V5U+o3<sp$#%01O,[Dk#64c'll_H:c\'+@Ec18M4>#cR[(pmH)"N,`k&!D!?\=A7b
%hZfJTXL6`'G3Q+roFK?a-.1&GE&sW`A?&4r#KGb$P"=F4]A2Xe+:Bsq1D#u*8>8La>38N,S-<IJS2_FO>I29[&u%ffC*9:j439Ia
%i8X-ca[7Cn81)#PS@V)hcb:PPWHbKt&@kH.Cml0-B[>B8N-p[ihZ]J6$e0n@M)lpI[NnI]\B1:gmki@K,i3dO=@=\d4dc?b)=)u.
%5'.XDZo55BGi\IT8."KZOF3:0DPUPb9LT"0Z!\k[R"Q/O">Ng6C@FuW7hb6P7DMmI871"E6G>A:^EH0FeAR#laQ4!igK[c5d5j>c
%"%pX;AiebUeqEf9Vq@m\Fb>n[K*fa8OD(sP*=PJE36pjC4*d09*0(QcEEg!V"sBOD>)VOl#-'Ghh`t@Cld-s_XDEh:<[S[(:@\N5
%,6SDdqHjhs7/im]9mG<uq)P8nU5^`[D1Z8T,28s6.&YlFVd0KoOi)$U9"mbTs(7A"%3BP:aR)^DD*)Bm+"Of6ZuS5o/%629FQ1N$
%9hg`c?EHkU='24WN8[2"BM0`,Pe8R`,foO#[1I3F:(G_[RbdeGOom7Xn<S`8CI&Y#LYWs5E-OQ$0]Gmi,kkp[,2XRSkGcpjL+2)(
%#`t!mAijcA>c\tBim8K#UbBH:j$M]E]^sAF,d3q&Vm&<T+&i3,qDU8(osM%hQa5A8Q9["Md)(g>i/i_`PQu3f/!4,WmIkO.C\P?C
%[6_,9TD8KZOQ/Cn_6##nR^XLYqmn%9i$!RiHsKW\6^(\pJ95=^QQok"OPL).UpGXR_*ik4mBE,Vi+,32O35=ZjuW_?"pJ'EZ3H5F
%fJbUfP>Cb<4bjplG^faoiDm*+B.G?4>Q$R[4:K7MU`R6aFdsZK]mT'W+/XIS1Wt@^5=i25\BXZW@D`;O<Ri4M;#3l"q&lQc%]$s#
%V[l1I>(BbJHW<nkijI.PH6""R!n!A55[&8b-9*iuX_@i>_N?;'%>1Wdq&%K"gB%KUcpq]LYa0ba[:l.5<(/dQ,H\F-gJYD1LQ0RZ
%eqK1(VV2p7e2i5fZ>SAL.rkLJEgE.7R=n7`LX)<TCZc=O4Z;hc#.QAsn=00$cqcK@J,=07[KH9Td[(?%So7p!EV%AID*"f"l!<6+
%XE-qVD+Y4GZ>c\;>so)<E^$'"*>AI--b_e:hBr5qnW/NVUD(E#!o)#j-OUj%#?,ZRCRL@RS8+@G5q^cphK:&PO:/%+cbBMS5$^7\
%(bDOq,;kS1inZ;iQ<bo2QW13b4:!-U!fX0WT;MKh`O_Lb'fLI1C4e,$m.A!&G6hSYl8^+;mOB[DPZK\kiQg0\%u#!ON13c`C1-Gl
%=R3piEIu29bCJqRc%a\PNVKf![?S%[#I2*cS3^)46p)haB`>aD[@W$F)n=\U(-%i/=-H#9/^=Rk+JDr6"1-VuN'V3$H?lh7n5'UM
%Ek"^&TJfli+:WVR;G>GT.99$HCblop"$"MrcDb/Qm"c0Y`JN&)A-8mtFQtlYEBRrALB%!=Ak`(%p&ETH%EX77qL<-,jUn4hr4dkp
%7LoF7h>@i>6Z?s7E+N$f#jN^o-hcFnOp%ep180%&RFQCeEs6BB+.fZ)ZA!Aj2=G<poB^g@8gt"'c="aFUk[.)`WM,OoBsD,A.Jq4
%ggr/,3t`/_^$?E/L]S\g6`a!JA.0TV].-+7110`5pr@(k(J]a7."FYcgm/#GG9sPPGEV_n&d@aNnIuaa!tYNU@`K8X&;8dN"ED+u
%$('r:@%$N8mV.jj"n+CsM\#M)&r0$5Q:Qi#ZpRI^]&rgP`KibWVthkTgsRPtNl2tnhnrc>@Y`k]Jod--"'K:I!`B)+?<>67:T'%G
%r;r%:In]bZS+q7*#WIL*4.Frq/6:1Z3HmS13Tg:bc$Pf'g#:^_.alakfd.(]2Zh/WmuMaDA+Lb0>>t4#d>;/sK;7J*6[=7'`'5UJ
%D,#C_;oDZ+l.bqdbDU;tP\]<k%uA$:!kX2EpGB$))D\h8J;q/7VQRc7)l;_IN$1@_CQ*&n'ks?^P">oS+gtW3rD6uooR06-V]%<%
%>%r%d,iDD;DdS'S5<8`3\)6/R?dV[L7+esrmnSB2*c@AZICW8`E2o&DY"Bdhg*!Jg)iag\F+#H7@q%-9,f_.J7D*RI8Fe2YIH5TW
%'T_E-%QUruQ&5lEOX_c09Ku%mPt,D5_AucE'"dsgKl&!3f3=X_p_JO3l`DrJ&Is4.P!%u4WMnMCW';=*KGI2+8hCX=\M5KM4>"u+
%Z\F>oX&F+Q(C"NdU(BW(qCoqo?R\FVVfSDEEpd9W/gWfpMc):I-!Hk:dJt;cjfWPoXtgoCWs9n\03uFX]O(/!*2kUaV0:t[i_u#5
%I/MkK-n?DG;Dt>dK1!TAkT]7AP,<mTYkja^6:BM)@T_rH8Ea_r2+6u_k"(sraB[`o?#dMJ,bu50=X.2G1'Q=fqa".jE)_3Y1&-\P
%gGtV9KdK+iC)n4YQHD`h5r0]@aLU7pV6s3hae!iC4msC#nm>[6m*L.S/hiV(q;Ru89Z&KUDp1N+P`B"KE6\ss->J/%fP:GU0-WP3
%CMFFLF'p7^)%i<E7?@qu3K;,DU))dOi?4$!A];WYVXp/i4g)&t@O]!KLnSN*Z-r7GP%'^mpF]cloS=\(Bo8-u=\X^)/g%eP;KLF7
%i+WNAe@R28if+?lMapl26b>(<_3edJEplo-9;G1K9GfXQgo0HL#gC!ja@!:SXe9.`MiU%O6:Y+:KSfSP3(l[fDh(ZHAu#!SN^c?M
%n)MrQn'^g.K,`f$]-974ofB!^3fX6"SD9KnKUg.L!iIC5<I-_=.'JXkeVc"KPINM:H:?]!Kf"'8r#iW4$$*',ck4D$:>W4D6WF5^
%&)%lZCbo<NPFb5<;$%E<"H\4`#EYINONO9hKkNp/TN#,H8X^'*1$/qMX;[1tGiiJ[_]@:TQuj\j9B@pdBLSM$>I!gZ<-kO_1`58'
%(X)u`;!c9kp-&sSqq(rTAXgYr4R)ts>!rPQ6p3XB.Au\r'$!S_:t$o2`U`dh'k,fS`.#`h5'LkXo$$(#SEEfCKoq60jqn>`eFk$V
%d%r-5WID5,AQ]17'DHes[RC:]La=[nM2d%]Xqb*+:IH^Fp+!MiatlrWV&%6^XEYh@IP:8'?.4\C=C"XO6!@5nKcq`QJ`U-P$K62#
%'gir$(77N/7&3s\[7d#n("Z+eabd_h/N'o5!g5<U@=Z^\$0!pidm3O]EtWOmN';WZUoGOLq9>bT3%(##/4:(OX?MPdg0p9>qje"C
%5j2hBSIJSW#u?Zt@fbNd+l'Oo&k*pX[Gli74rGd$3]/Gi^8M%iEAJd2=dSI@12VD!*R6.cT^9=SE\c66_S\u`d:nNG:gcNs@ne%I
%:Yt7^(#\&)c[<.&)flnefSaoTcFZ,LOFiTN!:ejc?@Z!a(F7p1.ZgIBFYI58/.l9c"db.pAi)4TYQY6jI??:TY@qSV`8C[;!MT><
%7#W1i7qFgI$hc,_3)7fHpi*VDfSe$3LWHU]O<io+r,g-b2N`H;6-$;P:NUn'4_fQ_S0M-0`n93#-.?da2!IQ*AHG3n?"2/.<fpC^
%,i/XtXlHcT+T0XDE@_a&K!jW</>]K/)1(JOj&nES3Y&Q([uRZiCSp-JFmHMsQhAn9O%$L>HcN17UV5\V,4:n[;sUf7YoSU'(a!X=
%*0#\b4-'&g/5rn8Zs>qehS%rL3b:?Y&PFV.NalF:dHuZES*b@I#ZA*`SH!a#23*bUO'X>-;N)[%6:_Z;D!8kAkY95SU>dgRbuJS;
%g*ANfD=QR20tl`.%:dQV206Pa*7&kC)IZ+tJC(8q:;tS@-if@b4*Yu-[+Ie!N^#%SEJ1&S'1)C`V^/qHB_HLQ]n@FnYc8nl"hPWp
%n96+-'6\H11^Bs+m&(-48IF"8UmBYq:^rh:R=u[e>9-LTF,4JqJFr/:fk)YS]\n#?$j9QFg)3>$L/l9HBSmOn],N&ZVE.qnP7aWi
%B@G^;H)?KkhU>q6(V.u-@ZI??X`?/=37,7n)'PQKSIVe3M2;Ma)mFBW,$2&5\E>2sj8T"\\3[sqP_1:!9d."A6>V/]$TEPSNo<;p
%S=&DJV4pBqdB?"1V(YZCA9T$6C"=l1dLCJS0Gce@!X=ERQ?2+54Rftu9W.=K4XQOUR5DVr@bD@/T9MQCe09k8k=A,`YSE)B.)i=)
%48k0@HG%b!>YHh@rK]e,dp0s5(Q*#r3C'/2C^Mn>Tk(QuO>d.qTu=ebaUlLcYrbL'2n2?*JF#i/`P=tY!h'PFQjs3qRHI.O9@Z[%
%F_gF(V($]?h3>>a84E?gcZTArO(Pg6OIYdJH\s5D3XV`dGXa,u%Gks^)+]t!5#k5Ir7sm_[\Zl(f6Z,r1/_ZRkcW!#*_(5YkEbj?
%EggS)@@r5_B$)k"Tn!trHENmHQS!mq#r4g@R?([obF'GkKX>S#0r5fN'c@qrQ;UY]>nUmVF*F+`e(4k::?P`J..f@_d.it>*e7B/
%F<-l"\HLLXa)3rAa]t%Z9"o5-2\&8b&3<<f9]n,6Xu;hX0Fs!TZs`a4ZU.#GPR2A++q4kjrQHr40bQpkN%GK^=TI-h^h9U;U_m<Q
%A6Xa$i]tLL'fdDF@L,&/.$6j=Z!T<nPo%'o$[.A'/al+4Fs7GqFLEgeJn[d'?Dk<V/nWg$k@tle]r3d2]3:!`/uj&-.jekK\F@[u
%dibcrM@.cq&LMTeMU'H_/LmKrd\NqP=I*2/ggU_En3NAPK59g^<iX$9Y=83U:<23s%&tN3!5QDQCb_J>L/^h"`RS?2o9J9mNZ9*1
%kf*Fh2n"VUf"-!$GD(\bc0!Y2]@b0BR>c9JGd<^/Z=3V9X&@YEZ*fDNNS%,<_V8@3<!$0RPS-<(!a^cD<D?(XRc[N!&2--KIUP?8
%\G?<%-G[V/$k;RInA'Y5q-.E-R\CeV"i>P@0.XU<bKM/;omU_^!701r(8A.Qa1W<BEDj';$8S=+M\_6;&.E'i<1`rH7+cZ9/$a_8
%UX+-AMZj_5Y;:*:8fAr>XI[=8/q_W9XLbVF-=U<eeb:K2C=ZkAj_A@3O^5#T@]D%9g^\NNk?K[)$MFk]i2"ko2:uMnZU9!Uo!Qrr
%@*;+P,?ch_YVm=\hilh.b"Ah/[07qT_H-7s2%;W_W8lpVN<B$WV=k9d0h6W!`A!A.7]Hq-Dd0$&VlOuXdHdmPKan2R%uWCN?e,nR
%a[Np8Xtmm]',@lqMVFN3(`NrC;I(iL>D$4!3-Zbr4tCfuAdD/DbWd?JI886T5K,1MapA9Pcuu4r<H!IG2m!^^oDMS9Hlkt^aO*D@
%R.o!Y(eqFW!n!(U.NEQppZd-n6QV\J<AuCtnf11f&p,imn4l<4\MLiK<oA,DUp/6Y`96uu7Cc/uCrI=8cFAKuD#hHRO_pLY]?IX<
%d):%&?*o8aH#7$s2V_Ujdo?f)Hf$:l't."L3Ob5pg#!b0W69oG:((af7VUU['i;HD[DbH^71"gBkNL:@>aY68q8o\iT4-/A>Q56I
%^0^N:fFn#8@ip-jH6MP4A`"VnP9i@c\W(=2)=N!sE_gG-61#uirRFBN\#(U3$r]_K:knM>Q#5-Mni"Hd_&(5NBFl#!=2bIM2T/<^
%'hWjh:m#`hg2aO=o$FN^hdu38]1$<Tc]]8;he#?i)QI6P3paObN$opgi`4$DNFHU\6_>^/=>&@Oe[:sKl?CP:A?d.+LiVAH@]@>K
%K=D?W(CcZVr5r%X>'"_%`*memk[)Gul@(,16E-<rp%;1o/66Z\3*lm&m9diDIo2/coh6hp+k>UdD_5ueksXi?:O#aeUb]Xug$0U'
%JZeC:BS52d9"su33SI"^QL)^,?D.(1ISN%C]@Y(XD&/nsdeSl%f/29k_*1'[jGK&5FjI-VX++V&1o9>9022aIKJp%4@S)9uSLkS7
%P%p$#Fmj'<W\k"Yg".G_L)dRWK21SU=![O\!X$YMES-mCOkMl^3a(Pk5r/5b=5F61GpdPq<]mHM07sE4U=i@8m[YJb6'AGmXOBL\
%(MHr\(#n*S##+\D=IK?_!XQhAY:SXbeou^,aS.?Ir70"T)V4uBn8rUf1rB0r=QB^3^O\s/C=`-ZmfMn/RYG,O7mkn6d:Uop1iNW'
%;P#cXO(ee3\=+l8"L\+)9/Nin/tS%gaj?!fQk<,(N^j3.D]gU#A^2<urZ\kP?\dH%q[K#%NInr5=);GhTV]$\1`@LnF$kL-;m]a9
%mf5lNqj1u&Hg2iR:_ZZ.QFEs.M;]=4_#"T-En,BK<IYTceZUht#3kJfQ.-q/PHt;H?[t;">?Fi&7;u5@3kJ]>YjLd,\?d."@=J,W
%rC([*^D=FtD,(n2!Ejt,^8:quGG!Dm"Kt$-#3ft[%*l<'@)2Hk:%]==CJT[Vg.mCER@Oa"[,6:4IhB?mADig#Q^XVi4262!9[J7_
%=oCeYqNG?LhBp.uCmth;>i4@:IhB?eA=01[A=/n?aY6$Xh.QBs_.ugN/9T9VaRXS$mcas``nmG3I]9Ln+#Nf],D:'L0M'FRqIkJk
%FhQ-9;?8FcLM;?E<+K)o9!b?$hW?(VaWRWM""IZ1P$re-iDlM-\6-G+`qsf4kqn0:jT+Da).%>8-4R9W@R0>O,W1?g[V,o,NffV*
%BhU7l$!X26Z<B*C4F\i[ao#]lY;Uc?bLQ:U.loA[#fg#<8l;b0Kf=/i_,I$MB6njf3fme!$LEX+M^992[uj9t=k!ZKQ*(cj+2RA(
%N+=[+FgOJ+dn<NofA[MT]Nj))KQB)61gUNn;?@KJBQep?91Cql(7oqR?3Ec@"_YI$8mgs8-XAKT:PS>VLY&M]O%q7MN53E1\b=%N
%C?.iHGJQq)Z'pR)Ne7!A@"SpKrhB7Ii2D+<`Et!_5C6YtW4$Lo)/sEpn_=8%?%W9"Jf@b1!NH`QP+j1ApVBUE7>AU9?f*E3;)A_2
%K<,h93#S3]-M*RPI/(G,T8U+5FRqMW.XhZNX%/a7ilqNY1cW)j_0mtCMWLE4JK=p1.IT"-$"RVghC2UQOT8<KAla0OcuA%@$\MSe
%JNP"4!oP4(intRP,_R^d+:_J_%oU_8V]^uY#n_]P20EA<"TAb`@$EU?!,H]A]A^'$Q=RG0cNS_S@4f;Q6O8thR9kQW'EB(sJ:uXO
%+@/+t!;\O0+aG%=QbE#?j37oU_95q[n%,_=OZ$)A2oV^]^7o5]FElmbKsN20!Ftj,+GjI&3dtlk#j^u:BFCVp9JNC+n][6&-<3('
%%$QHtOV.@p!,53"GU)iSD9\!bM\eS[J/RdLqa^ntq(<nKmK^iS+X9Q8J4/0Wm3>2,ZUDtCK3g))=QDicLrSt'\p=gNmZVVPEJ#="
%1Iq:4R.0+?_K-@!]Nbk@8@Sbq"@d.j=l">`<X<)sced`b'fVS74C9HiJ4E)qm">%Q3^*R>f(bd59Os(m18D[hMXT!5pp;Rn=KM%D
%'VmMh;P4;G1g^]d:%8,T"I0nMYlW.r(F4:*q8=R.)e%$P=EoMg'Y1&#s5<4b.1H<<$&E@OG3P/C$<'uid;:Wc;=6XPO^/L5mX/1\
%,<ZD4g/P"ULf1+7eq_n`cOGBP;UQ-2e2\VX*DFOp.X!M."4DNXR%slCD)2chgGT;HW(*aL.j`eHa/%*jDF<*Vl>1M<23a[,3;.EH
%)s0t?Gid6]F.sQED5?KMf.;g^OQ-1;G,301((4$!T6`1HZm=P=Z_sG!_AO>GGpFnUYg4'E:9hNV)"/Z2UI;#tJ,7i-E4(,Wf-4"<
%qc*4t_pcC(W`]K;$P"D87gc!Db!K&aj]6FQ`n/:je:E9=4GKOQ.\'uq'<345K9lmRdmNT.cHoJ]^XG,>L`bLUb?]CY!!fpRb<JIh
%4kNc:f#_^O.B>7+e7)8T:-m)(4(MFJ'pVcP@S[;C\?9(28gKRp61L;BI>ps;GWS>:bulJAXM`EqT4%@'DJ4@ba&iu+Zj>9/N(OY2
%^#Zk+.aYkfbW<*]QV'8t;,9eF@t=SVMm:Np^k,_g\c%6kC2`l]e;gmM<lNH7efSe(2rUk3!O.q.TWRbFn:<\S7E;8#CkhnXXVfo+
%BX)F2ro;Q,d\4\V#/<J+LIbN$l(YtSMA_7J!;M9X5hF3a-,(,:K2/LR&Qb3;$$.QS9CK]L/g^F7[8qa.bfc0m6Ar:`?:HF.R>d=l
%GZi7)=pi,Jla#G]O^A$_at!+6/1'dOAKWlG&Qu#`/@iA\"L[G,#jo/.olH$W>Jnns9_=KK/aQ9dn[)pP/rX:dGc`Cm_`WS96n=Rf
%"Dgds7-3S:c&3Yk,;P+<nZ'kMjb3q0c.<_BO;gj(8js;XGm6Y1A)nRJ<rc\o/0>g'"irkL\BGk]et#\Xhk0'DPL&1hnZ*_gporOp
%,Y]D/CVGYE.#(NeWhhU#c5#FbC$%(E-A`tmkCbfU#O`'4)l:safQ?l'"o*;tF>PPbZNt_$3t6gq3&X,*+icp,D<uTr.,3'6\cmBO
%YhC2?3"ga3>:Sum%)C+N4R`=#cI0AmW6Hu8Hr:M^m7(is7eKlHSMep<:]S'iiKXG:<f<Znmj0=6Y-8K@l!qS4TAZ=kqF6.1I`G%$
%c6EO=@:<0$_q7Fu;@1`aEb:P<4q'F0e)Og]8=;'Xl8j_]Bp8E?8G<ok2ANLi23U5Ia`s/3;/D*9TJe(_]>;JeGA^Qj#@m,S5*3Sb
%*n5)H!^@`D\k*GY.<0`gYs[WH*GjpfMAn[B(q-I1istJNc.KA"A<eG&M([,S826ZWSR)(MMu2M^b';NCJl19*VT5jp;(;g_##%@)
%S[b3(=50?VlW\>RQs2MWK+nb=TGtP<:*jZh84_>!!k*ss;N:XXGhV42p%V^AGF0[K^"A5KSY,0KQ??bjK=V'P.;sPD#+YrdE7MG&
%]aoPXS!,\N-Ai2Lj]1bXfRL8hY*P`9!9N&p(B+a\hlC_3EO/A;A'6JCUX\(?%9d7Wp>'+#(#?ZJD6g%D's(TD'u,h8e*F+M^O]o`
%8'q(/JG8)O,f;[1(^HiKa!*rj^[9Z#CQE!5XNbjLj/UdO(PrU*n&t5hcNUq-LCL1`]>M[I]bW7H"3"HMk644FNtdr0pNq25osHE+
%(ijmXX,Ad)j]aO6fYT>U@;:RsHUB8\#u-VOK"M:*;@%$'ib:9KJ?J7%B[i@-^f;>MM6$mjW-h<;PP9tV?;\gP5KM0#>kW.WJ6h-b
%'TCnr&Kg1:4;btV[ir,@<u[P.ZY\&!WQJYo<dXbVSq?%.UFd``g_-'sC<qFQQ6E*+n,9lX^]hC)QA8eBqdp+MED78mDsUn=!Q#G%
%$j+%jR7F([eu\$R-'`G$'N3YZ,!#ojBhU67O#%4oK<,h93#S3]%.effY<%%SVPGlUf'l6^RK<!,[lJa'<E%(&dSlU*;%PGuSX^O]
%<.OLA3hn8V1/;;gc.n3H<TutF&_j#\Q*Enq14RutWt$6+;gIXQS)MgUN)g$!%U`'a@7PQ`o<<WO3^],G:PKQ)W9/1W/LiMNC4*"p
%MG_j8O]nOhZ<B*CA5#Q4k4_&GEVNoc7`%*3p6*9p10ANlORFTf^5:sL^Dk%h,.03?lm9b%.&kmffqK\>"RV@(7]R'Sr>$i7X;27)
%),jFfq7VjHa7/?,eC+S'PHJC.\n^FL_me/a8[k(qR-\i/.>)St>&f-;<@Kgt\Q%#6+sZ+^4rDaXL3Y(ffuGTQ?P9E]0"_B^*3^%2
%@lM[V3.+f#X6GeC/.Sh`&.Z%(-m=5E\Mlh,<f3Du>V]6)27LmoA]g68`[@J'r`sO-ZMJ6u9'&],*P07GquQ@G$_LQ`>EpiQ%bRhQ
%R@mje),e06\TtX)a>j0"eb-7N7#3lkarm`R""If8PVRaAa/][l>OZl8qjN;FAV*@ZRg;P.!6:qqP;"*Q#;WH6fW)]D'q.F*ULXpR
%:eqT8%)L&USYVclPtd0q%-rrE2+pZp-`+M3<unq;ed%4NWe4BYHA=1&cNnVMci^gE>"Wi_.**R*A^ltZY/[e3BGenu,<C."X<^sX
%BCqQCWJT7C%6,pCIOl(pq7Vhj2.suD-!p/_0hpL\9MFjWZYT`LlPBh6X(u&hfP6Y]=&`He\=f;a'[_6?%EBD:#(L@E/1#qM"q<Qf
%;Gr8D]nbLgM3ku>Qd@PT1p1%IhG6jb>U!WKQllsdGPQLO'l)P:%ND8!Ba%oGG$WF$,tMR<.,.%S29&FmF#W<1ei5R.OsQj,fHKYj
%4)]%nVmG)>`!e>V9a8oq6=?UD+T'&=@a?a&/TU'[XdI&7`?RTSA08`jE#Z0=h\WdLTl$585)B?l6\H(N)^OY^=?\(+9*PV$2T;uW
%aE*RcGeERcH/ob:^2&P:`pCR=(r*]A2!>QGWHGV^b(iu)9_?uG;K.'o69W-ig`Z;0)GiZk,W2L;`D!l*h>2NM\ZR(_!p>Nu@Mlp;
%'SQ.P,)eR0(Zl1"0omUk)hW`!ItC?^-0,Z=:=aB$:Q_naEH'T2$kE\K16a+ngRI-ZC(cto?hWr'0BM!.p]ZMf36lhdPStZK3l]6[
%\8-`L%S`$bkdVgJ;@"ATpILET6ndo53K#&&VN-Y!RYYg#Js3H2C,1:la/cp4]U4U[3oOJt*S9&n?u/Rd=e'hecs(ugp7YG>Nap5)
%7!bitktTo2A8Js4HFetKM</V'9k5>;"XdZ@eE$S6LYp-gbjmXE*j0-?cd>\s.$*S6^g%]\Xli&26"iWnOX_eB:i+,E8<KU$;r!8h
%Kj`5me3n,2##rShWQG'L+2@R'=QEKE0LL*XO_7L.^QV&6aqr,_Q4r=HL*79XJG.PM7`I/2\RLJ.8aU7`)8qQ3Js3H2C,1:la7!k/
%l9##SMeF[q:kh:A8*>drHE>R>PK$G*Q[p;kqPYtq15m'(_rj-(MFhP,[RC;Dq6$M?o9Xm<l?n!,6([i"*"X>Vfc`Lq+K`4L0<$6`
%7?6r!G,b%`%!*k,l'Pq)'*aZf+uKsLEBYCAE8(*_CrsD)_2hl6&HqWVm`(QU0hm=@58MLfK2!Ck.`a5Z!;SLY]N9ib-%rtOf*`!0
%leSpW[Y=6piakr$.jc;egkK]!`RtEBAD&j2h.XZ@f361b\mUhOO\eY'@U1nD"64II"XpSG0Z<Nuf?As\6TRB&+5b\QLNr#+:Yj)]
%jU(L.K-.>6#EfO)rtq$e$$,O[74LC0)E/=2O^Vs8n[HI]*]b6<#$EMr:`14J(A!l@]\43?dgL_)[KfIT*'[%7rWX@K,k_!2LECO=
%B[qH^>kDrd*'&PA5U4324;QblLak/49(A:c'T4`E$n6h]D^aOQ/BWn@`VU?6mGT[]1))4qPtqkY?&dm=8`cVf"<RmrGj+Go^483/
%H>s%KGB>i9ckt5I7HU1;eX[ICR.@bLRYYg#J;Z.pQLW5hIdsQ/^9=18nciP-k+?G+`7WI2?6nM/3`_[=4<tB>6O0@CP9!FmZ#Pc4
%8/VO>hV$(9,YE#M<Rq<5=e7lPl;='K%24VX/WB0[Mj9S'U!AE8RYHCJ]=[:76W+0>Rj#S=HjOC[W'juJq/Y1ZdAM/62Qkqi/sW$W
%&*Tg\HJ!=&6$_GC,\r'3(Dhq-`'*S\Ffp<MdIo9G9CF1WK>&:]]O5`fM&qNpIRR4oY`F>aQ8M@XU6Ht&jD7ZE4:u>4js@s&(gae(
%]NC)7*JW\+aigs!Wm7.uCgER03Le7f?1*N^9P8fRB1<PqM;mV."3bhB-&>]'-OKd(]Q6BYM@2FCA6r<tArC5Ke$DSR3#1D7)e7)&
%k=;D[oj2V1kd&Olf27C^I<8&5JPPEP+B6YJU2^E`8GJTt`;W:4\@@b>U>&PkR=A6l56dcP/mErN5ZjLGrX&."6pmu7a#^QG'nX^b
%<nEf^A\O&n]'3^i%s9hVr2`g2]\bspNVf&skdjO#>JJ=.B,)[Kq?5Io2hn9R-Is;&p3BgNA&(+%Rj$>CmG7L'K)'TLJ74@mn$FC;
%aPPnZ-Y#ck0YdAPHTPqIY,gP!`&?F0mmb7f3'_rG"?Whds&\o'L\IujFmUra]!qtmnl_0d`d8foSoZ%'*6sC<B<`RV@%!2H6[-M-
%p4<LA>?lHu0XI.D'ASCM^rY?A@7[9Jr<=IErW(K/r=71T^Dt2Xci8Z_mm=e7q9LZc*+>Q)4.2g6or9/p%kA/go(1+^0/1Wn,(?V6
%+N^iXab]DX8s+)oO*!Hf1"O!l<7Y]i>DlTlFTs:)=kjZ"o3&rBbV%bceF0G-+u)EW[nc_Hg#Y%3,>QSde;5A&BJ2W])&T$j:(<(W
%W_[dJ,I)<]$:UgQZE><kYD<9Ub(R^mm&(]AfY""t9+CE$8t1dnp>EI;/QWMUROmWBfe@uh0tmN(Sbnb.m+PAZrhM66K%K4ahi#c=
%fE.d,Q-5[c^RpKeS)ZA<paS1u@$2EXH*jMWW/P2]\b24oP'@L3?]U'$a#7Coc(SB9PH6Fr='Z)d/!g$C\%fCP@)(?RZCbo7S=U/Y
%isI_Jir4SFq;LSaY/88=mk>ZL_"Z4.Pu<(O*6$/XEdZ@\Rm7$Xi;sF,b6>a90c<9]B-@,j*shbE@X>hu!/hZ\J8$c]0anIEG"KjU
%q$!)BL'E=WGME8&CLE;RFTIl;8OEL36L=ETkZ@tih+9JD%WnM\OK%_UH]FVKOTU)[\_k_1h!j;orW&bSSAt3*O*Np"=1dKuEI1;S
%pDo#o_jY?]+J/q1QS8iAE(6D:*Fl"n:n0R0%"s@pcH?!@@M[-]QSX^ibR,K"-Y_@Fe',ZBPi7^SOVs;1rOXc;_rJGAJt*V9*T3r'
%i0'/m_2F\[>eEJMGR%ns#K^<I%'r<Ija]G3lX^/"qoF4"j4=rF/]I,_L+O8I)BWI@?("%c"UpX5j)]T(NeOce>"0R?p\\Q6("8Ms
%9F@]rak?B%0A4&(%`Fq;%CB'Y0LS/dnMV%F3'8YK518T7nUJ=P.4S0);o!>/5mDd,^]+t46b$7pcJP5Al*&tP\:8'3`e5]d=X*\)
%.WJsCAV#J?W)_7nU;%[Dj;XkP,91cdh?E.In\dC60DWlqY)<p13K^&M8363H?cS0m%+FL32U5IMnlrB8H&N$(<U.Ra?^L;ZN,fu%
%%@ge)%*i?$Qe,=%r;L@$s*smgr6`hts8N#JGE6Zkr*og-jDSCRo(_rt?@DPCj.#dlnB"b8^3MiSHN!\u\$+XPIS##MIIcOjX1)HK
%Gs$NJkni4Y6)@`C:]BG<s-be,IfZA9==O~>
%AI9_PrivateDataEnd
